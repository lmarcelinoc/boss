version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: saas-postgres
    environment:
      POSTGRES_DB: saas_boilerplate
      POSTGRES_USER: saas_user
      POSTGRES_PASSWORD: saas_password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - saas-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U saas_user -d saas_boilerplate']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: saas-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - saas-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # API Backend (NestJS)
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
      target: development
    container_name: saas-api
    ports:
      - '3001:3001'
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://saas_user:saas_password@postgres:5432/saas_boilerplate
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - /app/apps/api/node_modules
      - /app/packages/shared/node_modules
      - /app/packages/config/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - saas-network
    command: yarn workspace @app/api start:dev

  # # Web Frontend (Next.js)
  # web:
  #   build:
  #     context: .
  #     dockerfile: docker/web/Dockerfile
  #     target: development
  #   container_name: saas-web
  #   ports:
  #     - '3000:3000'
  #   environment:
  #     NODE_ENV: development
  #     NEXT_PUBLIC_API_URL: http://localhost:3001/api
  #   volumes:
  #     - ./apps/web:/app/apps/web
  #     - ./packages:/app/packages
  #     - /app/apps/web/node_modules
  #     - /app/packages/ui/node_modules
  #     - /app/packages/shared/node_modules
  #   depends_on:
  #     - api
  #   networks:
  #     - saas-network
  #   command: yarn workspace @app/web dev

  # # Mobile Development (Expo)
  # mobile:
  #   build:
  #     context: .
  #     dockerfile: docker/mobile/Dockerfile
  #     target: development
  #   container_name: saas-mobile
  #   ports:
  #     - '19000:19000'
  #     - '19001:19001'
  #     - '19002:19002'
  #   environment:
  #     NODE_ENV: development
  #     EXPO_PUBLIC_API_URL: http://localhost:3001/api
  #   volumes:
  #     - ./apps/mobile:/app/apps/mobile
  #     - ./packages:/app/packages
  #     - /app/apps/mobile/node_modules
  #     - /app/packages/shared/node_modules
  #   depends_on:
  #     - api
  #   networks:
  #     - saas-network
  #   command: yarn workspace @app/mobile start

  # Mailhog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: saas-mailhog
    platform: linux/amd64
    ports:
      - '1025:1025' # SMTP
      - '8025:8025' # Web UI
    networks:
      - saas-network

  # MinIO for File Storage (S3 Compatible)
  minio:
    image: minio/minio:latest
    container_name: saas-minio
    ports:
      - '9000:9000' # API
      - '9001:9001' # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - saas-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  # Adminer - Database Management Interface
  adminer:
    image: adminer:latest
    container_name: saas-adminer
    ports:
      - '8081:8080'
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - saas-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  saas-network:
    driver: bridge
