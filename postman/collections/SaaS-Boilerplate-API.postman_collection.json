{
  "info": {
    "name": "SaaS Boilerplate API",
    "description": "Complete API collection for the SaaS Boilerplate platform",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001/api",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "tenantId",
      "value": "",
      "type": "string"
    },
    {
      "key": "targetTenantId",
      "value": "",
      "type": "string"
    },
    {
      "key": "membershipId",
      "value": "",
      "type": "string"
    },
    {
      "key": "sessionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "currentSessionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "roleId",
      "value": "",
      "type": "string"
    },
    {
      "key": "permissionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "permissionId1",
      "value": "",
      "type": "string"
    },
    {
      "key": "permissionId2",
      "value": "",
      "type": "string"
    },
    {
      "key": "permissionId3",
      "value": "",
      "type": "string"
    },
    {
      "key": "parentRoleId",
      "value": "",
      "type": "string"
    },
    {
      "key": "onboardingId",
      "value": "",
      "type": "string"
    },
    {
      "key": "verificationToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminUserId",
      "value": "",
      "type": "string"
    },
    {
      "key": "teamId",
      "value": "",
      "type": "string"
    },
    {
      "key": "subscriptionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "planId",
      "value": "",
      "type": "string"
    },
    {
      "key": "targetPlanId",
      "value": "",
      "type": "string"
    },
    {
      "key": "stripeSubscriptionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "invoiceId",
      "value": "",
      "type": "string"
    },
    {
      "key": "customerId",
      "value": "",
      "type": "string"
    },
    {
      "key": "planName",
      "value": "",
      "type": "string"
    },
    {
      "key": "delegationId",
      "value": "",
      "type": "string"
    },
    {
      "key": "delegateId",
      "value": "",
      "type": "string"
    },
    {
      "key": "delegatorId",
      "value": "",
      "type": "string"
    },
    {
      "key": "approverId",
      "value": "",
      "type": "string"
    },
    {
      "key": "importJobId",
      "value": "",
      "type": "string"
    },
    {
      "key": "teamMembershipId",
      "value": "",
      "type": "string"
    },
    {
      "key": "teamInvitationId",
      "value": "",
      "type": "string"
    },
    {
      "key": "invitationToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "invitationId",
      "value": "",
      "type": "string"
    },
    {
      "key": "newUserId",
      "value": "",
      "type": "string"
    },
    {
      "key": "analyticsEventId",
      "value": "",
      "type": "string"
    },
    {
      "key": "analyticsAlertId",
      "value": "",
      "type": "string"
    },
    {
      "key": "exportId",
      "value": "",
      "type": "string"
    },
    {
      "key": "reportId",
      "value": "",
      "type": "string"
    },
    {
      "key": "fileKey",
      "value": "",
      "type": "string"
    },
    {
      "key": "fileUrl",
      "value": "",
      "type": "string"
    },
    {
      "key": "signedUrl",
      "value": "",
      "type": "string"
    },
    {
      "key": "copiedFileKey",
      "value": "",
      "type": "string"
    },
    {
      "key": "movedFileKey",
      "value": "",
      "type": "string"
    },
    {
      "key": "brandingId",
      "value": "",
      "type": "string"
    },
    {
      "key": "profileId",
      "value": "",
      "type": "string"
    },
    {
      "key": "subscriptionId",
      "value": "",
      "type": "string"
    },
    {
      "key": "customerId",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response.user).to.have.property('id');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "    pm.expect(response.user).to.have.property('firstName');",
                  "    pm.expect(response.user).to.have.property('lastName');",
                  "});",
                  "",
                  "pm.test('Response has tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tenant');",
                  "    pm.expect(response.tenant).to.have.property('id');",
                  "    pm.expect(response.tenant).to.have.property('name');",
                  "    pm.expect(response.tenant).to.have.property('domain');",
                  "});",
                  "",
                  "pm.test('User email matches request', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.user.email).to.equal('superadmin@example.com');",
                  "});",
                  "",
                  "pm.test('Tenant domain matches request', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.tenant.domain).to.equal('testcompany.com');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('userId', response.user.id);",
                  "    pm.environment.set('tenantId', response.tenant.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"superadmin@example.com\",\n  \"password\": \"SuperAdmin123!\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"tenantName\": \"Test Company\",\n  \"domain\": \"testcompany.com\",\n  \"description\": \"Test tenant for development\",\n  \"contactEmail\": \"admin@testcompany.com\",\n  \"contactPhone\": \"+1234567890\",\n  \"address\": \"123 Test Street\",\n  \"city\": \"Test City\",\n  \"state\": \"Test State\",\n  \"postalCode\": \"12345\",\n  \"country\": \"US\",\n  \"timezone\": \"America/New_York\",\n  \"locale\": \"en-US\",\n  \"currency\": \"USD\",\n  \"marketingConsent\": true,\n  \"acceptTerms\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "register"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "    pm.environment.set('refreshToken', response.refreshToken);",
                  "    pm.environment.set('userId', response.user.id);",
                  "    pm.environment.set('tenantId', response.user.tenantId);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"superadmin@example.com\",\n  \"password\": \"SuperAdmin123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('Email verified successfully');",
                  "});",
                  "",
                  "pm.test('Response indicates email verification', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('verified');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"email-verification-token-here\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-email",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "verify-email"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Resend Email Verification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('Verification email sent');",
                  "});",
                  "",
                  "pm.test('Response indicates email was sent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('sent');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"superadmin@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/resend-verification",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "resend-verification"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"superadmin@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/forgot-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "forgot-password"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"password-reset-token-here\",\n  \"newPassword\": \"NewSuperAdmin123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "reset-password"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "    pm.environment.set('refreshToken', response.refreshToken);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "refresh"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "profile"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "logout"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Multi-Factor Authentication",
      "item": [
        {
          "name": "Setup MFA",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/setup",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "mfa",
                "setup"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Enable MFA",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/enable",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "mfa",
                "enable"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Disable MFA",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/disable",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "mfa",
                "disable"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify MFA",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"123456\",\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/verify",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "mfa",
                "verify"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get MFA Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/status",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "mfa",
                "status"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Regenerate Backup Codes",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/mfa/backup-codes/regenerate",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "mfa",
                "backup-codes",
                "regenerate"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Profile Management",
      "item": [
        {
          "name": "Create Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has profile data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('firstName');",
                  "    pm.expect(response).to.have.property('lastName');",
                  "    pm.expect(response).to.have.property('userId');",
                  "});",
                  "",
                  "pm.test('Profile data matches request', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.firstName).to.equal('John');",
                  "    pm.expect(response.lastName).to.equal('Doe');",
                  "    pm.expect(response.displayName).to.equal('John Doe');",
                  "    pm.expect(response.bio).to.equal('Software Developer');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('profileId', response.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"displayName\": \"John Doe\",\n  \"bio\": \"Software Developer\",\n  \"jobTitle\": \"Developer\",\n  \"department\": \"Engineering\",\n  \"location\": \"New York\",\n  \"phone\": \"+1234567890\",\n  \"website\": \"https://johndoe.dev\",\n  \"socialLinks\": {\n    \"linkedin\": \"https://linkedin.com/in/johndoe\",\n    \"twitter\": \"https://twitter.com/johndoe\",\n    \"github\": \"https://github.com/johndoe\"\n  },\n  \"preferences\": {\n    \"emailNotifications\": true,\n    \"pushNotifications\": false,\n    \"timezone\": \"America/New_York\",\n    \"locale\": \"en-US\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/profiles",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "profiles"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get My Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has profile data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('firstName');",
                  "    pm.expect(response).to.have.property('lastName');",
                  "    pm.expect(response).to.have.property('userId');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/profiles/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "profiles",
                "me"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update My Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated profile data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.firstName).to.equal('John Updated');",
                  "    pm.expect(response.bio).to.equal('Updated bio');",
                  "    pm.expect(response.jobTitle).to.equal('Senior Developer');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John Updated\",\n  \"bio\": \"Updated bio\",\n  \"jobTitle\": \"Senior Developer\",\n  \"department\": \"Engineering\",\n  \"location\": \"San Francisco\",\n  \"phone\": \"+1987654321\",\n  \"website\": \"https://johnupdated.dev\",\n  \"socialLinks\": {\n    \"linkedin\": \"https://linkedin.com/in/johnupdated\",\n    \"twitter\": \"https://twitter.com/johnupdated\",\n    \"github\": \"https://github.com/johnupdated\"\n  },\n  \"preferences\": {\n    \"emailNotifications\": true,\n    \"pushNotifications\": true,\n    \"timezone\": \"America/Los_Angeles\",\n    \"locale\": \"en-US\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/profiles/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "profiles",
                "me"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Profile Completion Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has completion data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('completionPercentage');",
                  "    pm.expect(response).to.have.property('missingFields');",
                  "    pm.expect(response).to.have.property('isComplete');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/profiles/me/completion",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "profiles",
                "me",
                "completion"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Upload Avatar",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has avatar data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('avatarUrl');",
                  "    pm.expect(response).to.have.property('avatarFileKey');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/profiles/me/avatar",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "profiles",
                "me",
                "avatar"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Avatar",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response indicates avatar deleted', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('deleted');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/profiles/me/avatar",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "profiles",
                "me",
                "avatar"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete My Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Response body is empty', function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/profiles/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "profiles",
                "me"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Account Recovery",
      "item": [
        {
          "name": "Initiate Account Recovery",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"superadmin@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/initiate",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "recovery",
                "initiate"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify Account Recovery",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recoveryToken\": \"recovery-token-here\",\n  \"backupCode\": \"12345678\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/verify",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "recovery",
                "verify"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Complete Account Recovery",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recoverySessionToken\": \"recovery-session-token-here\",\n  \"newTotpSecret\": \"optional-new-totp-secret\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/complete",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "recovery",
                "complete"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Recovery Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/status?recoverySessionToken=recovery-session-token-here",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "recovery",
                "status"
              ],
              "query": [
                {
                  "key": "recoverySessionToken",
                  "value": "recovery-session-token-here"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Attempt Backup Code",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"recoveryToken\": \"recovery-token-here\",\n  \"backupCode\": \"12345678\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/recovery/attempt",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "recovery",
                "attempt"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Session Management",
      "item": [
        {
          "name": "Get All Sessions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.sessions && response.sessions.length > 0) {",
                  "        pm.environment.set('sessionId', response.sessions[0].id);",
                  "        pm.environment.set('currentSessionId', response.sessions[0].id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/sessions",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sessions"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Active Sessions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/sessions/active",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sessions",
                "active"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Session by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sessions",
                "{{sessionId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Session",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"deviceName\": \"Updated Device Name\",\n  \"isTrusted\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sessions",
                "{{sessionId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Revoke Session",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Security concern\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sessions",
                "{{sessionId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Revoke All Sessions",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Logout all devices\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sessions",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sessions"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Revoke Other Sessions",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-session-id",
                "value": "{{currentSessionId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Security concern\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sessions/others",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sessions",
                "others"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Mark Device as Trusted",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}/trust",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sessions",
                "{{sessionId}}",
                "trust"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Session Activity",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}/activity",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sessions",
                "{{sessionId}}",
                "activity"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Extend Session",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"additionalMinutes\": 60\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}/extend",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sessions",
                "{{sessionId}}",
                "extend"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Mark Session as Suspicious",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/sessions/{{sessionId}}/suspicious",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sessions",
                "{{sessionId}}",
                "suspicious"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Session Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/sessions/stats/summary",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "sessions",
                "stats",
                "summary"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Role-Based Access Control (RBAC)",
      "item": [
        {
          "name": "Permissions",
          "item": [
            {
              "name": "Get All Permissions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has pagination structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('permissions');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response).to.have.property('limit');",
                      "});",
                      "",
                      "pm.test('Permissions is an array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.permissions).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Pagination values are correct', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.page).to.equal(1);",
                      "    pm.expect(response.limit).to.equal(50);",
                      "    pm.expect(response.total).to.be.a('number');",
                      "});",
                      "",
                      "pm.test('Permission objects have required fields', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.permissions.length > 0) {",
                      "        const permission = response.permissions[0];",
                      "        pm.expect(permission).to.have.property('id');",
                      "        pm.expect(permission).to.have.property('name');",
                      "        pm.expect(permission).to.have.property('resource');",
                      "        pm.expect(permission).to.have.property('action');",
                      "        pm.expect(permission).to.have.property('scope');",
                      "        pm.expect(permission).to.have.property('isSystem');",
                      "        pm.expect(permission).to.have.property('isActive');",
                      "    }",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/permissions?page=1&limit=50",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "permissions"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "50"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Permission by ID",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/permissions/{{permissionId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "permissions",
                    "{{permissionId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Permission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('resource');",
                      "    pm.expect(response).to.have.property('action');",
                      "    pm.expect(response).to.have.property('scope');",
                      "    pm.expect(response).to.have.property('isSystem');",
                      "    pm.expect(response).to.have.property('isActive');",
                      "});",
                      "",
                      "pm.test('Permission is not system permission', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.isSystem).to.be.false;",
                      "});",
                      "",
                      "pm.test('Permission is active', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.isActive).to.be.true;",
                      "});",
                      "",
                      "// Set permission ID for subsequent requests",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('permissionId', response.id);",
                      "    pm.collectionVariables.set('permissionId1', response.id);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"files:manage\",\n  \"description\": \"File management permission\",\n  \"resource\": \"files\",\n  \"action\": \"manage\",\n  \"scope\": \"tenant\",\n  \"conditions\": {\n    \"requireApproval\": true\n  }\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/permissions",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "permissions"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Permission",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"files:manage:enhanced\",\n  \"description\": \"Enhanced file management permission\",\n  \"scope\": \"team\",\n  \"conditions\": {\n    \"requireAudit\": true\n  },\n  \"isActive\": true\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/permissions/{{permissionId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "permissions",
                    "{{permissionId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Permission",
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/permissions/{{permissionId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "permissions",
                    "{{permissionId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get System Permissions",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/permissions/system",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "permissions",
                    "system"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Custom Permissions",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/permissions/custom",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "permissions",
                    "custom"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Roles",
          "item": [
            {
              "name": "Get All Roles",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has pagination structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('roles');",
                      "    pm.expect(response).to.have.property('total');",
                      "    pm.expect(response).to.have.property('page');",
                      "    pm.expect(response).to.have.property('limit');",
                      "});",
                      "",
                      "pm.test('Roles is an array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.roles).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Pagination values are correct', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.page).to.equal(1);",
                      "    pm.expect(response.limit).to.equal(50);",
                      "    pm.expect(response.total).to.be.a('number');",
                      "});",
                      "",
                      "pm.test('Role objects have required fields', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.roles.length > 0) {",
                      "        const role = response.roles[0];",
                      "        pm.expect(role).to.have.property('id');",
                      "        pm.expect(role).to.have.property('name');",
                      "        pm.expect(role).to.have.property('type');",
                      "        pm.expect(role).to.have.property('level');",
                      "        pm.expect(role).to.have.property('isSystem');",
                      "        pm.expect(role).to.have.property('isActive');",
                      "        pm.expect(role).to.have.property('permissions');",
                      "        pm.expect(role).to.have.property('totalPermissions');",
                      "    }",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles?page=1&limit=50",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "50"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Role by ID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('type');",
                      "    pm.expect(response).to.have.property('level');",
                      "    pm.expect(response).to.have.property('isSystem');",
                      "    pm.expect(response).to.have.property('isActive');",
                      "    pm.expect(response).to.have.property('permissions');",
                      "    pm.expect(response).to.have.property('totalPermissions');",
                      "});",
                      "",
                      "pm.test('Role ID matches request', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.equal(pm.collectionVariables.get('roleId'));",
                      "});",
                      "",
                      "pm.test('Permissions is an array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.permissions).to.be.an('array');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/{{roleId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles",
                    "{{roleId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Role",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('type');",
                      "    pm.expect(response).to.have.property('level');",
                      "    pm.expect(response).to.have.property('isSystem');",
                      "    pm.expect(response).to.have.property('isActive');",
                      "    pm.expect(response).to.have.property('permissions');",
                      "    pm.expect(response).to.have.property('totalPermissions');",
                      "});",
                      "",
                      "pm.test('Role is custom type', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.type).to.equal('custom');",
                      "});",
                      "",
                      "pm.test('Role is not system role', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.isSystem).to.be.false;",
                      "});",
                      "",
                      "pm.test('Role is active', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.isActive).to.be.true;",
                      "});",
                      "",
                      "pm.test('Role has permissions array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.permissions).to.be.an('array');",
                      "});",
                      "",
                      "// Set role ID for subsequent requests",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('roleId', response.id);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Team Lead\",\n  \"description\": \"Team lead role with enhanced permissions\",\n  \"type\": \"custom\",\n  \"level\": 3,\n  \"parentRoleId\": \"{{parentRoleId}}\",\n  \"metadata\": {\n    \"canManageTeam\": true,\n    \"canViewReports\": true\n  },\n  \"permissionIds\": [\n    \"{{permissionId1}}\",\n    \"{{permissionId2}}\"\n  ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/roles",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Role",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('description');",
                      "    pm.expect(response).to.have.property('level');",
                      "    pm.expect(response.name).to.equal('Senior Team Lead');",
                      "    pm.expect(response.description).to.equal('Senior team lead with additional privileges');",
                      "    pm.expect(response.level).to.equal(2);",
                      "});",
                      "",
                      "pm.test('Role ID remains unchanged', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.equal(pm.collectionVariables.get('roleId'));",
                      "});",
                      "",
                      "pm.test('Metadata is updated', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('metadata');",
                      "    pm.expect(response.metadata).to.have.property('canManageTeam');",
                      "    pm.expect(response.metadata).to.have.property('canViewReports');",
                      "    pm.expect(response.metadata).to.have.property('canManageBudget');",
                      "});",
                      "",
                      "pm.test('Updated timestamp is present', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('updatedAt');",
                      "    pm.expect(response.updatedAt).to.be.a('string');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Senior Team Lead\",\n  \"description\": \"Senior team lead with additional privileges\",\n  \"level\": 2,\n  \"metadata\": {\n    \"canManageTeam\": true,\n    \"canViewReports\": true,\n    \"canManageBudget\": true\n  },\n  \"isActive\": true\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/roles/{{roleId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles",
                    "{{roleId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Delete Role",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 204', function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "pm.test('Response body is empty', function () {",
                      "    pm.expect(pm.response.text()).to.be.empty;",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/{{roleId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles",
                    "{{roleId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get System Roles",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('All roles are system roles', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.length > 0) {",
                      "        response.forEach(role => {",
                      "            pm.expect(role).to.have.property('isSystem');",
                      "            pm.expect(role.isSystem).to.be.true;",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test('System roles have required fields', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.length > 0) {",
                      "        const role = response[0];",
                      "        pm.expect(role).to.have.property('id');",
                      "        pm.expect(role).to.have.property('name');",
                      "        pm.expect(role).to.have.property('type');",
                      "        pm.expect(role).to.have.property('level');",
                      "        pm.expect(role).to.have.property('isActive');",
                      "    }",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/system",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles",
                    "system"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Custom Roles",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('All roles are custom roles', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.length > 0) {",
                      "        response.forEach(role => {",
                      "            pm.expect(role).to.have.property('type');",
                      "            pm.expect(role.type).to.equal('custom');",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test('Custom roles have required fields', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.length > 0) {",
                      "        const role = response[0];",
                      "        pm.expect(role).to.have.property('id');",
                      "        pm.expect(role).to.have.property('name');",
                      "        pm.expect(role).to.have.property('type');",
                      "        pm.expect(role).to.have.property('level');",
                      "        pm.expect(role).to.have.property('isActive');",
                      "    }",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/custom",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles",
                    "custom"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Default Roles",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has success message', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('message');",
                      "    pm.expect(response.message).to.include('Default roles created successfully');",
                      "});",
                      "",
                      "pm.test('Response indicates default roles were created', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.message).to.include('default');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/default",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles",
                    "default"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Super Admin Permissions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has success message', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('message');",
                      "    pm.expect(response.message).to.include('Super Admin permissions updated successfully');",
                      "});",
                      "",
                      "pm.test('Response has permissions count', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('permissionsCount');",
                      "    pm.expect(response.permissionsCount).to.be.a('number');",
                      "    pm.expect(response.permissionsCount).to.be.greaterThan(0);",
                      "});",
                      "",
                      "pm.test('Super Admin has comprehensive permissions', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.permissionsCount).to.be.greaterThan(100);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/super-admin/update-permissions",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles",
                    "super-admin",
                    "update-permissions"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get Super Admin Permissions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response is an array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Super Admin has extensive permissions', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.length).to.be.greaterThan(100);",
                      "});",
                      "",
                      "pm.test('Permissions have required fields', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.length > 0) {",
                      "        const permission = response[0];",
                      "        pm.expect(permission).to.have.property('id');",
                      "        pm.expect(permission).to.have.property('name');",
                      "        pm.expect(permission).to.have.property('resource');",
                      "        pm.expect(permission).to.have.property('action');",
                      "        pm.expect(permission).to.have.property('scope');",
                      "    }",
                      "});",
                      "",
                      "pm.test('Super Admin has all resource types', function () {",
                      "    const response = pm.response.json();",
                      "    const resources = [...new Set(response.map(p => p.resource))];",
                      "    pm.expect(resources.length).to.be.greaterThan(10);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/super-admin/permissions",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles",
                    "super-admin",
                    "permissions"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Assign Permissions to Role",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has updated role data', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('name');",
                      "    pm.expect(response).to.have.property('permissions');",
                      "    pm.expect(response).to.have.property('totalPermissions');",
                      "});",
                      "",
                      "pm.test('Permissions array is updated', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.permissions).to.be.an('array');",
                      "    pm.expect(response.totalPermissions).to.be.a('number');",
                      "    pm.expect(response.totalPermissions).to.be.greaterThan(0);",
                      "});",
                      "",
                      "pm.test('Role ID matches request', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.id).to.equal(pm.collectionVariables.get('roleId'));",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"permissionIds\": [\n    \"{{permissionId1}}\",\n    \"{{permissionId2}}\",\n    \"{{permissionId3}}\"\n  ]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/roles/{{roleId}}/permissions",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles",
                    "{{roleId}}",
                    "permissions"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Remove Permissions from Role",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 204', function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "pm.test('Response body is empty', function () {",
                      "    pm.expect(pm.response.text()).to.be.empty;",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "[\n  \"{{permissionId1}}\",\n  \"{{permissionId2}}\"\n]"
                },
                "url": {
                  "raw": "{{baseUrl}}/roles/{{roleId}}/permissions",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles",
                    "{{roleId}}",
                    "permissions"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "User Role Management",
          "item": [
            {
              "name": "Assign Role to User",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates success', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('message');",
                      "    pm.expect(response.message).to.include('Role assigned successfully');",
                      "});",
                      "",
                      "pm.test('Response has user and role information', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('userId');",
                      "    pm.expect(response).to.have.property('roleId');",
                      "    pm.expect(response.userId).to.equal(pm.collectionVariables.get('userId'));",
                      "    pm.expect(response.roleId).to.equal(pm.collectionVariables.get('roleId'));",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"roleId\": \"{{roleId}}\",\n  \"metadata\": {\n    \"assignedBy\": \"{{userId}}\",\n    \"reason\": \"Promotion to team lead\",\n    \"effectiveDate\": \"2024-01-01\"\n  }\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/roles/users/{{userId}}/roles",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles",
                    "users",
                    "{{userId}}",
                    "roles"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Remove Role from User",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 204', function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "pm.test('Response body is empty', function () {",
                      "    pm.expect(pm.response.text()).to.be.empty;",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/users/{{userId}}/roles/{{roleId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles",
                    "users",
                    "{{userId}}",
                    "roles",
                    "{{roleId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get User Roles",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has user roles structure', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('userId');",
                      "    pm.expect(response).to.have.property('roles');",
                      "    pm.expect(response).to.have.property('total');",
                      "});",
                      "",
                      "pm.test('User ID matches request', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.userId).to.equal(pm.collectionVariables.get('userId'));",
                      "});",
                      "",
                      "pm.test('Roles is an array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.roles).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Total count is a number', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.total).to.be.a('number');",
                      "    pm.expect(response.total).to.be.greaterThanOrEqual(0);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/users/{{userId}}/roles",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles",
                    "users",
                    "{{userId}}",
                    "roles"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get User Permissions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has permissions array', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('permissions');",
                      "    pm.expect(response.permissions).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Response has user information', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('userId');",
                      "    pm.expect(response.userId).to.equal(pm.collectionVariables.get('userId'));",
                      "});",
                      "",
                      "pm.test('Permissions are strings', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.permissions.length > 0) {",
                      "        pm.expect(response.permissions[0]).to.be.a('string');",
                      "    }",
                      "});",
                      "",
                      "pm.test('Permission format is correct', function () {",
                      "    const response = pm.response.json();",
                      "    if (response.permissions.length > 0) {",
                      "        const permission = response.permissions[0];",
                      "        pm.expect(permission).to.match(/^[a-z]+:[a-z]+$/);",
                      "    }",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/roles/users/{{userId}}/permissions",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles",
                    "users",
                    "{{userId}}",
                    "permissions"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Check User Permission",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has permission check result', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('hasPermission');",
                      "    pm.expect(response.hasPermission).to.be.a('boolean');",
                      "});",
                      "",
                      "pm.test('Response has request details', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('resource');",
                      "    pm.expect(response).to.have.property('action');",
                      "    pm.expect(response).to.have.property('scope');",
                      "    pm.expect(response).to.have.property('userId');",
                      "});",
                      "",
                      "pm.test('Request details match input', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.resource).to.equal('users');",
                      "    pm.expect(response.action).to.equal('create');",
                      "    pm.expect(response.scope).to.equal('tenant');",
                      "    pm.expect(response.userId).to.equal(pm.collectionVariables.get('userId'));",
                      "});",
                      "",
                      "pm.test('Response has roles that grant permission', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('grantedByRoles');",
                      "    pm.expect(response.grantedByRoles).to.be.an('array');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"resource\": \"users\",\n  \"action\": \"create\",\n  \"scope\": \"tenant\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/roles/users/{{userId}}/permissions/check",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "roles",
                    "users",
                    "{{userId}}",
                    "permissions",
                    "check"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "Tenants",
      "item": [
        {
          "name": "Create Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('domain');",
                  "    pm.expect(response).to.have.property('plan');",
                  "    pm.expect(response).to.have.property('isActive');",
                  "});",
                  "",
                  "pm.test('Tenant is active by default', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.isActive).to.be.true;",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('tenantId', response.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Tenant\",\n  \"domain\": \"test-tenant.com\",\n  \"plan\": \"basic\",\n  \"maxUsers\": 10,\n  \"maxStorage\": 1024,\n  \"isActive\": true,\n  \"features\": [\"mfa_enforcement\", \"email_templates\"],\n  \"settings\": {\n    \"timezone\": \"America/New_York\",\n    \"locale\": \"en-US\",\n    \"currency\": \"USD\"\n  },\n  \"metadata\": {\n    \"industry\": \"technology\",\n    \"size\": \"small\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Tenants",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has tenants array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tenants');",
                  "    pm.expect(response.tenants).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response has total count', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response.total).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants?page=1&limit=10&search=test&plan=basic&isActive=true",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": "test"
                },
                {
                  "key": "plan",
                  "value": "basic"
                },
                {
                  "key": "isActive",
                  "value": "true"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Tenant Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has statistics data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('totalTenants');",
                  "    pm.expect(response).to.have.property('activeTenants');",
                  "    pm.expect(response).to.have.property('trialTenants');",
                  "    pm.expect(response).to.have.property('verifiedTenants');",
                  "    pm.expect(response).to.have.property('tenantsByPlan');",
                  "    pm.expect(response).to.have.property('recentTenants');",
                  "    pm.expect(response).to.have.property('growthRate');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/statistics",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "statistics"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Tenant by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('domain');",
                  "    pm.expect(response).to.have.property('plan');",
                  "    pm.expect(response).to.have.property('isActive');",
                  "});",
                  "",
                  "pm.test('Tenant ID matches request', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.equal(pm.collectionVariables.get('tenantId'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "{{tenantId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Tenant by Domain",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('domain');",
                  "    pm.expect(response).to.have.property('plan');",
                  "    pm.expect(response).to.have.property('isActive');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/domain/test-tenant.com",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "domain",
                "test-tenant.com"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('plan');",
                  "    pm.expect(response.name).to.equal('Updated Test Tenant');",
                  "    pm.expect(response.plan).to.equal('premium');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Tenant\",\n  \"plan\": \"premium\",\n  \"maxUsers\": 50,\n  \"maxStorage\": 2048,\n  \"isActive\": true,\n  \"features\": [\"mfa_enforcement\", \"email_templates\", \"advanced_analytics\"],\n  \"settings\": {\n    \"timezone\": \"America/New_York\",\n    \"locale\": \"en-US\",\n    \"currency\": \"USD\"\n  },\n  \"metadata\": {\n    \"industry\": \"technology\",\n    \"size\": \"medium\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "{{tenantId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "{{tenantId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Restore Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has restored tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('isActive');",
                  "    pm.expect(response.isActive).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/restore",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "{{tenantId}}",
                "restore"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify Tenant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has verified tenant data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('isVerified');",
                  "    pm.expect(response.isVerified).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/verify",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "{{tenantId}}",
                "verify"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Tenant Usage",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has usage summary', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tenantId');",
                  "    pm.expect(response).to.have.property('tenantName');",
                  "    pm.expect(response).to.have.property('currentUsage');",
                  "    pm.expect(response).to.have.property('limits');",
                  "    pm.expect(response).to.have.property('usagePercentage');",
                  "    pm.expect(response).to.have.property('isOverLimit');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/usage",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "{{tenantId}}",
                "usage"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Tenant Usage",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated usage data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tenantId');",
                  "    pm.expect(response).to.have.property('metric');",
                  "    pm.expect(response).to.have.property('value');",
                  "    pm.expect(response).to.have.property('limit');",
                  "    pm.expect(response.metric).to.equal('apiCalls');",
                  "    pm.expect(response.value).to.equal(150);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"value\": 150,\n  \"limit\": 1000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/usage/apiCalls",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "{{tenantId}}",
                "usage",
                "apiCalls"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Tenant Features",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/features",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "{{tenantId}}",
                "features"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Check Feature Enabled",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has enabled status', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('enabled');",
                  "    pm.expect(response.enabled).to.be.a('boolean');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/features/ADVANCED_ANALYTICS",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "{{tenantId}}",
                "features",
                "ADVANCED_ANALYTICS"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Feature Flag",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated feature flag', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('tenantId');",
                  "    pm.expect(response).to.have.property('feature');",
                  "    pm.expect(response).to.have.property('isEnabled');",
                  "    pm.expect(response.feature).to.equal('ADVANCED_ANALYTICS');",
                  "    pm.expect(response.isEnabled).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"enabled\": true,\n  \"config\": {\n    \"retentionDays\": 30,\n    \"maxQueries\": 1000\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/features/ADVANCED_ANALYTICS",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "{{tenantId}}",
                "features",
                "ADVANCED_ANALYTICS"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Bulk Update Feature Flags",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bulk update successful', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(Array.isArray(response)).to.be.true;",
                  "    pm.expect(response.length).to.equal(2);",
                  "});",
                  "",
                  "pm.test('Feature flags updated correctly', function () {",
                  "    const response = pm.response.json();",
                  "    const mfaFlag = response.find(flag => flag.feature === 'MFA_ENFORCEMENT');",
                  "    const ssoFlag = response.find(flag => flag.feature === 'SSO_INTEGRATION');",
                  "    pm.expect(mfaFlag.isEnabled).to.be.true;",
                  "    pm.expect(ssoFlag.isEnabled).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"updates\": [\n    {\n      \"feature\": \"mfa_enforcement\",\n      \"enabled\": true,\n      \"config\": {\n        \"maxRetries\": 3\n      }\n    },\n    {\n      \"feature\": \"sso_integration\",\n      \"enabled\": false\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/features/bulk",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "{{tenantId}}",
                "features",
                "bulk"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Feature Flags Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Statistics response structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response).to.have.property('enabled');",
                  "    pm.expect(response).to.have.property('disabled');",
                  "    pm.expect(typeof response.total).to.equal('number');",
                  "    pm.expect(typeof response.enabled).to.equal('number');",
                  "    pm.expect(typeof response.disabled).to.equal('number');",
                  "});",
                  "",
                  "pm.test('Statistics are consistent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.total).to.equal(response.enabled + response.disabled);",
                  "    pm.expect(response.total).to.be.at.least(0);",
                  "    pm.expect(response.enabled).to.be.at.least(0);",
                  "    pm.expect(response.disabled).to.be.at.least(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/features/stats",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "{{tenantId}}",
                "features",
                "stats"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Test Case Insensitive Feature Names",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Case insensitive feature name works', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('enabled');",
                  "    pm.expect(typeof response.enabled).to.equal('boolean');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/features/MFA_ENFORCEMENT",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "{{tenantId}}",
                "features",
                "MFA_ENFORCEMENT"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Test Invalid Feature Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message contains valid features', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('Valid features are:');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"enabled\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/{{tenantId}}/features/invalid_feature",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "{{tenantId}}",
                "features",
                "invalid_feature"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Tenant Onboarding",
      "item": [
        {
          "name": "Start Onboarding",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has onboarding data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('onboardingId');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('currentStep');",
                  "    pm.expect(response).to.have.property('progressPercentage');",
                  "    pm.expect(response).to.have.property('nextAction');",
                  "    pm.expect(response).to.have.property('estimatedCompletion');",
                  "});",
                  "",
                  "pm.test('Onboarding is in progress', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.equal('in_progress');",
                  "    pm.expect(response.progressPercentage).to.be.at.least(0);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('onboardingId', response.onboardingId);",
                  "    if (response.tenantId) {",
                  "        pm.collectionVariables.set('tenantId', response.tenantId);",
                  "    }",
                  "    if (response.adminUserId) {",
                  "        pm.collectionVariables.set('adminUserId', response.adminUserId);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Acme Corporation\",\n  \"domain\": \"acme.example.com\",\n  \"adminUser\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"email\": \"admin@acme.com\",\n    \"password\": \"SecurePass123!\",\n    \"phone\": \"+1-555-123-4567\",\n    \"jobTitle\": \"CEO\"\n  },\n  \"description\": \"A leading technology company\",\n  \"industry\": \"Technology\",\n  \"companySize\": \"50-100\",\n  \"contactEmail\": \"contact@acme.com\",\n  \"contactPhone\": \"+1-555-123-4567\",\n  \"address\": \"123 Main Street\",\n  \"city\": \"San Francisco\",\n  \"state\": \"CA\",\n  \"postalCode\": \"94105\",\n  \"country\": \"United States\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"locale\": \"en-US\",\n  \"currency\": \"USD\",\n  \"plan\": \"pro\",\n  \"requestedFeatures\": [\"advanced_analytics\", \"email_templates\"],\n  \"sendWelcomeEmail\": true,\n  \"autoVerify\": false,\n  \"trialDays\": 30,\n  \"metadata\": {\n    \"source\": \"website\",\n    \"campaign\": \"summer2024\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "onboarding"
              ]
            }
          }
        },
        {
          "name": "Get Onboarding Progress",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has progress data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('onboardingId');",
                  "    pm.expect(response).to.have.property('currentStep');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('completedSteps');",
                  "    pm.expect(response).to.have.property('progressPercentage');",
                  "});",
                  "",
                  "pm.test('Progress data is valid', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.progressPercentage).to.be.at.least(0).and.at.most(100);",
                  "    pm.expect(response.completedSteps).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding/{{onboardingId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "onboarding",
                "{{onboardingId}}"
              ]
            }
          }
        },
        {
          "name": "Verify Onboarding Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Onboarding verified successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('onboardingId');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response.status).to.equal('completed');",
                  "});",
                  "",
                  "pm.test('Progress is 100%', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.progressPercentage).to.equal(100);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"onboardingId\": \"{{onboardingId}}\",\n  \"verificationToken\": \"{{verificationToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding/{{onboardingId}}/verify",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "onboarding",
                "{{onboardingId}}",
                "verify"
              ]
            }
          }
        },
        {
          "name": "Resend Verification Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Verification email sent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('sent successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"onboardingId\": \"{{onboardingId}}\",\n  \"email\": \"admin@acme.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding/{{onboardingId}}/resend-verification",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "onboarding",
                "{{onboardingId}}",
                "resend-verification"
              ]
            }
          }
        },
        {
          "name": "Cancel Onboarding",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Onboarding cancelled', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('cancelled successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"onboardingId\": \"{{onboardingId}}\",\n  \"reason\": \"User decided not to proceed\",\n  \"cleanup\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding/{{onboardingId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "onboarding",
                "{{onboardingId}}"
              ]
            }
          }
        },
        {
          "name": "Check Onboarding Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check data is valid', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('onboardingId');",
                  "    pm.expect(response).to.have.property('currentStep');",
                  "    pm.expect(response).to.have.property('issues');",
                  "    pm.expect(response).to.have.property('lastActivity');",
                  "});",
                  "",
                  "pm.test('Status is valid', function () {",
                  "    const response = pm.response.json();",
                  "    const validStatuses = ['healthy', 'warning', 'error'];",
                  "    pm.expect(validStatuses).to.include(response.status);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding/{{onboardingId}}/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "onboarding",
                "{{onboardingId}}",
                "health"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Start Onboarding - Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error response has message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"adminUser\": {\n    \"firstName\": \"\",\n    \"lastName\": \"\",\n    \"email\": \"invalid-email\",\n    \"password\": \"weak\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "onboarding"
              ]
            }
          }
        },
        {
          "name": "Start Onboarding - Duplicate Tenant Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 409', function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test('Conflict error message', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('already exists');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Acme Corporation\",\n  \"adminUser\": {\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Smith\",\n    \"email\": \"jane@acme.com\",\n    \"password\": \"SecurePass123!\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "onboarding"
              ]
            }
          }
        },
        {
          "name": "Verify Onboarding - Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Invalid token error', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('Invalid verification token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"onboardingId\": \"{{onboardingId}}\",\n  \"verificationToken\": \"invalid-token\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding/{{onboardingId}}/verify",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "onboarding",
                "{{onboardingId}}",
                "verify"
              ]
            }
          }
        },
        {
          "name": "Get Progress - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Not found error', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.include('not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/onboarding/invalid-uuid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "onboarding",
                "invalid-uuid"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Tenant Switching",
      "item": [
        {
          "name": "User Tenant Management",
          "item": [
            {
              "name": "Get User Tenant Memberships",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('memberships');",
                      "    pm.expect(response).to.have.property('currentTenantId');",
                      "    pm.expect(response).to.have.property('totalCount');",
                      "    pm.expect(response).to.have.property('activeCount');",
                      "    pm.expect(response).to.have.property('pendingCount');",
                      "});",
                      "",
                      "pm.test('Memberships array is valid', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.memberships).to.be.an('array');",
                      "    ",
                      "    if (response.memberships.length > 0) {",
                      "        const membership = response.memberships[0];",
                      "        pm.expect(membership).to.have.property('id');",
                      "        pm.expect(membership).to.have.property('tenant');",
                      "        pm.expect(membership).to.have.property('role');",
                      "        pm.expect(membership).to.have.property('status');",
                      "        pm.expect(membership).to.have.property('isCurrentTenant');",
                      "        pm.expect(membership).to.have.property('isActive');",
                      "        pm.expect(membership.tenant).to.have.property('id');",
                      "        pm.expect(membership.tenant).to.have.property('name');",
                      "    }",
                      "});",
                      "",
                      "// Store first tenant ID for other requests",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    if (response.memberships.length > 0) {",
                      "        pm.environment.set('tenantId', response.currentTenantId);",
                      "        pm.environment.set('targetTenantId', response.memberships[0].tenant.id);",
                      "        pm.environment.set('membershipId', response.memberships[0].id);",
                      "    }",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/tenants/user/memberships",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "tenants",
                    "user",
                    "memberships"
                  ]
                }
              }
            },
            {
              "name": "Get Current Tenant Context",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('success');",
                      "    pm.expect(response).to.have.property('tenantContext');",
                      "    pm.expect(response).to.have.property('membership');",
                      "});",
                      "",
                      "pm.test('Tenant context is valid', function () {",
                      "    const response = pm.response.json();",
                      "    const context = response.tenantContext;",
                      "    pm.expect(context).to.have.property('id');",
                      "    pm.expect(context).to.have.property('name');",
                      "    pm.expect(context).to.have.property('plan');",
                      "    pm.expect(context).to.have.property('features');",
                      "    pm.expect(context.features).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Membership is valid', function () {",
                      "    const response = pm.response.json();",
                      "    const membership = response.membership;",
                      "    pm.expect(membership).to.have.property('id');",
                      "    pm.expect(membership).to.have.property('role');",
                      "    pm.expect(membership).to.have.property('status');",
                      "    pm.expect(membership).to.have.property('permissions');",
                      "    pm.expect(membership.permissions).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/tenants/current",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "tenants",
                    "current"
                  ]
                }
              }
            }
          ]
        },
        {
          "name": "Tenant Switching",
          "item": [
            {
              "name": "Switch Tenant",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('success');",
                      "    pm.expect(response).to.have.property('message');",
                      "    pm.expect(response).to.have.property('tenantContext');",
                      "    pm.expect(response).to.have.property('membership');",
                      "    pm.expect(response).to.have.property('accessToken');",
                      "});",
                      "",
                      "pm.test('Switch was successful', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.success).to.be.true;",
                      "    pm.expect(response.accessToken).to.be.a('string');",
                      "    pm.expect(response.accessToken).to.not.be.empty;",
                      "});",
                      "",
                      "// Update access token with new one",
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.environment.set('accessToken', response.accessToken);",
                      "    pm.environment.set('tenantId', response.tenantContext.id);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{targetTenantId}}\",\n  \"reason\": \"Testing tenant switch via Postman\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/tenants/switch",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "tenants",
                    "switch"
                  ]
                }
              }
            }
          ]
        },
        {
          "name": "Access Verification",
          "item": [
            {
              "name": "Verify Tenant Access",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('hasAccess');",
                      "    pm.expect(response).to.have.property('permissions');",
                      "    pm.expect(response.permissions).to.be.an('array');",
                      "});",
                      "",
                      "pm.test('Access verification result is valid', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.hasAccess).to.be.a('boolean');",
                      "    ",
                      "    if (response.hasAccess) {",
                      "        pm.expect(response).to.have.property('role');",
                      "        pm.expect(response).to.have.property('status');",
                      "        pm.expect(response).to.have.property('tenant');",
                      "    } else {",
                      "        pm.expect(response).to.have.property('reason');",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"permissions\": [\"users:read\", \"projects:read\"]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/tenants/{{tenantId}}/verify-access",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "tenants",
                    "{{tenantId}}",
                    "verify-access"
                  ]
                }
              }
            },
            {
              "name": "Bulk Verify Tenant Access",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('results');",
                      "    pm.expect(response).to.have.property('summary');",
                      "});",
                      "",
                      "pm.test('Summary is valid', function () {",
                      "    const response = pm.response.json();",
                      "    const summary = response.summary;",
                      "    pm.expect(summary).to.have.property('totalChecked');",
                      "    pm.expect(summary).to.have.property('accessGranted');",
                      "    pm.expect(summary).to.have.property('accessDenied');",
                      "    pm.expect(summary.totalChecked).to.equal(summary.accessGranted + summary.accessDenied);",
                      "});",
                      "",
                      "pm.test('Results are valid', function () {",
                      "    const response = pm.response.json();",
                      "    const results = response.results;",
                      "    pm.expect(results).to.be.an('object');",
                      "    ",
                      "    Object.keys(results).forEach(tenantId => {",
                      "        const result = results[tenantId];",
                      "        pm.expect(result).to.have.property('hasAccess');",
                      "        pm.expect(result).to.have.property('permissions');",
                      "        pm.expect(result.permissions).to.be.an('array');",
                      "    });",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantIds\": [\"{{tenantId}}\", \"{{targetTenantId}}\"],\n  \"permissions\": [\"users:read\"]\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/tenants/verify-access/bulk",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "tenants",
                    "verify-access",
                    "bulk"
                  ]
                }
              }
            }
          ]
        },
        {
          "name": "Cache Management",
          "item": [
            {
              "name": "Clear User Cache",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates success', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('success');",
                      "    pm.expect(response).to.have.property('message');",
                      "    pm.expect(response.success).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/tenants/cache/clear",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "tenants",
                    "cache",
                    "clear"
                  ]
                }
              }
            }
          ]
        },
        {
          "name": "Admin Operations",
          "item": [
            {
              "name": "Add User to Tenant (Admin)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('success');",
                      "    pm.expect(response).to.have.property('message');",
                      "    pm.expect(response).to.have.property('membership');",
                      "});",
                      "",
                      "pm.test('Membership is valid', function () {",
                      "    const response = pm.response.json();",
                      "    const membership = response.membership;",
                      "    pm.expect(membership).to.have.property('id');",
                      "    pm.expect(membership).to.have.property('userId');",
                      "    pm.expect(membership).to.have.property('tenantId');",
                      "    pm.expect(membership).to.have.property('role');",
                      "    pm.expect(membership).to.have.property('status');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userId\": \"{{userId}}\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"role\": \"member\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/tenants/admin/memberships",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "tenants",
                    "admin",
                    "memberships"
                  ]
                }
              }
            },
            {
              "name": "Remove User from Tenant (Admin)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response indicates success', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('success');",
                      "    pm.expect(response).to.have.property('message');",
                      "    pm.expect(response.success).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/tenants/admin/memberships/{{userId}}/{{tenantId}}/remove",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "tenants",
                    "admin",
                    "memberships",
                    "{{userId}}",
                    "{{tenantId}}",
                    "remove"
                  ]
                }
              }
            }
          ]
        },
        {
          "name": "Tenant Switching Health",
          "item": [
            {
              "name": "Tenant Switching Health Check",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Health check response is valid', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response).to.have.property('service');",
                      "    pm.expect(response).to.have.property('timestamp');",
                      "    pm.expect(response).to.have.property('version');",
                      "    pm.expect(response.status).to.equal('ok');",
                      "    pm.expect(response.service).to.equal('tenant-switching');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/tenants/health",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "tenants",
                    "health"
                  ]
                }
              }
            },
            {
              "name": "Get Membership Details",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Response has required fields', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('success');",
                      "    pm.expect(response).to.have.property('membershipId');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/tenants/memberships/{{membershipId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "tenants",
                    "memberships",
                    "{{membershipId}}"
                  ]
                }
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Tenant Branding",
      "item": [
        {
          "name": "Get Tenant Branding",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tenants/branding",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "branding"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "    pm.expect(response).to.have.property('branding');",
                  "    pm.expect(response).to.have.property('tenant');",
                  "    pm.expect(response).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Branding configuration is valid', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.branding).to.have.property('theme');",
                  "    pm.expect(response.branding).to.have.property('colorScheme');",
                  "    pm.expect(response.branding).to.have.property('typography');",
                  "    pm.expect(response.branding).to.have.property('logo');",
                  "    pm.expect(response.tenant).to.have.property('id');",
                  "    pm.expect(response.tenant).to.have.property('name');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Tenant Branding (Admin Only)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"theme\": \"dark\",\n  \"colorScheme\": {\n    \"primary\": \"#FF5733\",\n    \"secondary\": \"#33FF57\",\n    \"accent\": \"#3357FF\",\n    \"background\": \"#1A1A1A\",\n    \"text\": \"#FFFFFF\",\n    \"success\": \"#28A745\",\n    \"warning\": \"#FFC107\",\n    \"error\": \"#DC3545\"\n  },\n  \"typography\": {\n    \"fontFamily\": \"Roboto, sans-serif\",\n    \"fontSize\": \"16px\",\n    \"lineHeight\": \"1.6\",\n    \"headingFontFamily\": \"Poppins, sans-serif\",\n    \"headingFontSize\": \"24px\",\n    \"headingLineHeight\": \"1.25\"\n  },\n  \"logo\": {\n    \"url\": \"https://example.com/logo.png\",\n    \"type\": \"image\",\n    \"altText\": \"Company Logo\",\n    \"width\": \"200\",\n    \"height\": \"60\"\n  },\n  \"customCss\": \".custom-button { border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/branding",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "branding"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Branding updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.message).to.include('updated successfully');",
                  "    pm.expect(response.branding.theme).to.equal('dark');",
                  "    pm.expect(response.branding.colorScheme.primary).to.equal('#FF5733');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Validate Branding Configuration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"theme\": \"light\",\n  \"colorScheme\": {\n    \"primary\": \"#3B82F6\",\n    \"secondary\": \"#6B7280\",\n    \"accent\": \"#10B981\",\n    \"background\": \"#FFFFFF\",\n    \"text\": \"#1F2937\",\n    \"success\": \"#10B981\",\n    \"warning\": \"#F59E0B\",\n    \"error\": \"#EF4444\"\n  },\n  \"typography\": {\n    \"fontFamily\": \"Inter, system-ui, sans-serif\",\n    \"fontSize\": \"16px\",\n    \"lineHeight\": \"1.5\",\n    \"headingFontFamily\": \"Inter, system-ui, sans-serif\",\n    \"headingFontSize\": \"24px\",\n    \"headingLineHeight\": \"1.25\"\n  },\n  \"logo\": {\n    \"url\": \"https://example.com/logo.png\",\n    \"type\": \"image\",\n    \"altText\": \"Company Logo\",\n    \"width\": \"200\",\n    \"height\": \"60\"\n  },\n  \"customCss\": \".brand-button { background-color: var(--brand-primary); color: white; padding: 12px 24px; border-radius: 6px; }\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/branding/validate",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "branding",
                "validate"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Validation completed successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('isValid');",
                  "    pm.expect(response).to.have.property('errors');",
                  "    pm.expect(response).to.have.property('warnings');",
                  "    pm.expect(response.isValid).to.be.true;",
                  "    pm.expect(response.errors).to.be.an('array');",
                  "    pm.expect(response.warnings).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Branding Preview",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tenants/branding/preview",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "branding",
                "preview"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Preview URL generated', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('previewUrl');",
                  "    pm.expect(response.previewUrl).to.include('/api/tenants/branding/preview');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Generate Branding CSS",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tenants/branding/css",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "branding",
                "css"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('CSS generated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('css');",
                  "    pm.expect(response.css).to.be.a('string');",
                  "    pm.expect(response.css).to.include(':root');",
                  "    pm.expect(response.css).to.include('--brand-');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Export Branding Configuration",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tenants/branding/export",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "branding",
                "export"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Configuration exported successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('configuration');",
                  "    pm.expect(response).to.have.property('exportDate');",
                  "    pm.expect(response.configuration).to.have.property('version');",
                  "    pm.expect(response.configuration).to.have.property('tenant');",
                  "    pm.expect(response.configuration).to.have.property('branding');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Default Branding Configuration",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/branding/default",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "branding",
                "default"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Default configuration returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.theme).to.equal('light');",
                  "    pm.expect(response.colorScheme.primary).to.equal('#3B82F6');",
                  "    pm.expect(response.typography.fontFamily).to.equal('Inter, system-ui, sans-serif');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Reset Tenant Branding (Admin Only)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tenants/branding",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "branding"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Branding reset successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.message).to.include('reset to default');",
                  "    pm.expect(response.branding.theme).to.equal('light');",
                  "    pm.expect(response.branding.colorScheme.primary).to.equal('#3B82F6');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Import Branding Configuration (Admin Only)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"version\": \"1.0\",\n  \"exportDate\": \"2024-01-15T10:30:00.000Z\",\n  \"tenant\": {\n    \"id\": \"{{tenantId}}\",\n    \"name\": \"Test Company\"\n  },\n  \"branding\": {\n    \"theme\": \"dark\",\n    \"colorScheme\": {\n      \"primary\": \"#FF5733\",\n      \"secondary\": \"#33FF57\",\n      \"accent\": \"#3357FF\",\n      \"background\": \"#1A1A1A\",\n      \"text\": \"#FFFFFF\",\n      \"success\": \"#28A745\",\n      \"warning\": \"#FFC107\",\n      \"error\": \"#DC3545\"\n    },\n    \"typography\": {\n      \"fontFamily\": \"Arial, sans-serif\",\n      \"fontSize\": \"18px\",\n      \"lineHeight\": \"1.7\",\n      \"headingFontFamily\": \"Georgia, serif\",\n      \"headingFontSize\": \"28px\",\n      \"headingLineHeight\": \"1.2\"\n    },\n    \"logo\": {\n      \"url\": \"https://example.com/new-logo.png\",\n      \"type\": \"image\",\n      \"altText\": \"New Company Logo\",\n      \"width\": \"250\",\n      \"height\": \"80\"\n    },\n    \"customCss\": \".imported-style { background: linear-gradient(45deg, var(--brand-primary), var(--brand-secondary)); }\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/branding/import",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "branding",
                "import"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Configuration imported successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.message).to.include('imported successfully');",
                  "    pm.expect(response.branding.theme).to.equal('dark');",
                  "    pm.expect(response.branding.colorScheme.primary).to.equal('#FF5733');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Validate Invalid Branding Configuration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"colorScheme\": {\n    \"primary\": \"invalid-color\",\n    \"secondary\": \"another-invalid\",\n    \"accent\": \"#invalid\"\n  },\n  \"typography\": {\n    \"fontSize\": \"invalid-size\",\n    \"lineHeight\": \"invalid-height\"\n  },\n  \"customCss\": \"expression(alert('xss')); background-image: url('javascript:alert(1)');\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tenants/branding/validate",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "branding",
                "validate"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Validation detects errors', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.isValid).to.be.false;",
                  "    pm.expect(response.errors).to.be.an('array');",
                  "    pm.expect(response.errors.length).to.be.greaterThan(0);",
                  "    pm.expect(response.errors).to.include('Primary color must be a valid hex color');",
                  "    pm.expect(response.errors).to.include('Custom CSS contains potentially dangerous content');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Branding Service Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/tenants/branding/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "tenants",
                "branding",
                "health"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check successful', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.equal('ok');",
                  "    pm.expect(response.service).to.equal('tenant-branding');",
                  "    pm.expect(response.version).to.equal('2.0.0');",
                  "    pm.expect(response.timestamp).to.be.a('string');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "User Lifecycle Management",
      "item": [
        {
          "name": "User Registration",
          "item": [
            {
              "name": "Register New User",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"newuser@example.com\",\n  \"password\": \"SuperAdmin123!\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"role\": \"member\",\n  \"sendEmailVerification\": true,\n  \"sendWelcomeEmail\": true\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users"
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 201', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test('User created successfully', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('id');",
                      "    pm.expect(response).to.have.property('email');",
                      "    pm.expect(response).to.have.property('firstName');",
                      "    pm.expect(response).to.have.property('lastName');",
                      "    pm.expect(response).to.have.property('status');",
                      "    pm.expect(response.status).to.equal('pending');",
                      "    pm.expect(response.emailVerified).to.be.false;",
                      "});",
                      "",
                      "// Store user ID for subsequent requests",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.environment.set('newUserId', response.id);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Register User - Duplicate Email",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"existinguser@example.com\",\n  \"password\": \"SuperAdmin123!\",\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"role\": \"member\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users"
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Duplicate email error', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.message).to.include('already exists');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "User Activation",
          "item": [
            {
              "name": "Activate User",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"skipEmailVerification\": false,\n  \"auditEvent\": \"user.activated_by_admin\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/users/lifecycle/{{newUserId}}/activate",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "lifecycle",
                    "{{newUserId}}",
                    "activate"
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('User activated successfully', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.status).to.equal('active');",
                      "    pm.expect(response.emailVerified).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Activate User - Already Active",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"skipEmailVerification\": false\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/users/lifecycle/{{userId}}/activate",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "lifecycle",
                    "{{userId}}",
                    "activate"
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 400', function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test('Already active error', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.message).to.include('already active');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "User Suspension",
          "item": [
            {
              "name": "Suspend User",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"reason\": \"Violation of terms of service\",\n  \"duration\": 30,\n  \"auditEvent\": \"user.suspended_by_admin\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/users/lifecycle/{{userId}}/suspend",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "lifecycle",
                    "{{userId}}",
                    "suspend"
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('User suspended successfully', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.status).to.equal('suspended');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Suspend User - Indefinite",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"reason\": \"Security violation\",\n  \"auditEvent\": \"user.suspended_indefinitely\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/users/lifecycle/{{newUserId}}/suspend",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "lifecycle",
                    "{{newUserId}}",
                    "suspend"
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('User suspended indefinitely', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.status).to.equal('suspended');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "User Reactivation",
          "item": [
            {
              "name": "Reactivate User",
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"auditEvent\": \"user.reactivated_by_admin\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/users/lifecycle/{{newUserId}}/reactivate",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "lifecycle",
                    "{{newUserId}}",
                    "reactivate"
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('User reactivated successfully', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response.status).to.equal('active');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "User Lifecycle Information",
          "item": [
            {
              "name": "Get User Lifecycle Info",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/users/{{userId}}/lifecycle",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "{{userId}}",
                    "lifecycle"
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Lifecycle info retrieved', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('isActive');",
                      "    pm.expect(response).to.have.property('isSuspended');",
                      "    pm.expect(response).to.have.property('isDeleted');",
                      "    pm.expect(response).to.have.property('user');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "User Deletion",
          "item": [
            {
              "name": "Delete User",
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"auditEvent\": \"user.deleted_by_admin\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/users/{{newUserId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "{{newUserId}}"
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 204', function () {",
                      "    pm.response.to.have.status(204);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Bulk Operations",
          "item": [
            {
              "name": "Bulk Activate Users",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userIds\": [\"{{userId}}\"],\n  \"auditEvent\": \"users.bulk_activated_by_admin\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/users/lifecycle/activate",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "lifecycle",
                    "activate"
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bulk activation successful', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('successCount');",
                      "    pm.expect(response).to.have.property('failureCount');",
                      "    pm.expect(response).to.have.property('successfulUserIds');",
                      "    pm.expect(response).to.have.property('errors');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Bulk Suspend Users",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userIds\": [\"{{userId}}\"],\n  \"auditEvent\": \"users.bulk_suspended_by_admin\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/users/lifecycle/suspend",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "lifecycle",
                    "suspend"
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bulk suspension successful', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('successCount');",
                      "    pm.expect(response).to.have.property('failureCount');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Bulk Reactivate Users",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userIds\": [\"{{userId}}\"],\n  \"auditEvent\": \"users.bulk_reactivated_by_admin\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/users/lifecycle/reactivate",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "lifecycle",
                    "reactivate"
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bulk reactivation successful', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('successCount');",
                      "    pm.expect(response).to.have.property('failureCount');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Bulk Delete Users",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"userIds\": [\"{{userId}}\"],\n  \"auditEvent\": \"users.bulk_deleted_by_admin\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/users/lifecycle/delete",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "lifecycle",
                    "delete"
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status code is 200', function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test('Bulk deletion successful', function () {",
                      "    const response = pm.response.json();",
                      "    pm.expect(response).to.have.property('successCount');",
                      "    pm.expect(response).to.have.property('failureCount');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Bulk Import Operations",
              "item": [
                {
                  "name": "Upload and Start Import",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "multipart/form-data"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{accessToken}}"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "file",
                          "type": "file",
                          "src": []
                        },
                        {
                          "key": "options",
                          "value": "{\n  \"mapping\": {\n    \"email\": \"Email\",\n    \"firstName\": \"First Name\",\n    \"lastName\": \"Last Name\",\n    \"role\": \"Role\",\n    \"phone\": \"Phone\",\n    \"status\": \"Status\",\n    \"team\": \"Team\"\n  },\n  \"validationRules\": {\n    \"skipHeaderRow\": true,\n    \"maxRecords\": 1000,\n    \"allowDuplicateEmails\": false\n  }\n}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/bulk/import",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        "bulk",
                        "import"
                      ]
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Status code is 201', function () {",
                          "    pm.response.to.have.status(201);",
                          "});",
                          "",
                          "pm.test('Response has required fields', function () {",
                          "    const response = pm.response.json();",
                          "    pm.expect(response).to.have.property('success');",
                          "    pm.expect(response).to.have.property('data');",
                          "    pm.expect(response.data).to.have.property('id');",
                          "    pm.expect(response.data).to.have.property('status');",
                          "});",
                          "",
                          "pm.test('Job is created successfully', function () {",
                          "    const response = pm.response.json();",
                          "    pm.expect(response.success).to.be.true;",
                          "    pm.expect(response.data.status).to.be.oneOf(['pending', 'processing']);",
                          "});",
                          "",
                          "// Store job ID for subsequent requests",
                          "if (pm.response.code === 201) {",
                          "    const response = pm.response.json();",
                          "    pm.collectionVariables.set('importJobId', response.data.jobId);",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Get Import Progress",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{accessToken}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/bulk/import/{{importJobId}}/progress",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        "bulk",
                        "import",
                        "{{importJobId}}",
                        "progress"
                      ]
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Status code is 200', function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test('Progress data is correct', function () {",
                          "    const response = pm.response.json();",
                          "    pm.expect(response).to.have.property('jobId');",
                          "    pm.expect(response).to.have.property('status');",
                          "    pm.expect(response).to.have.property('progress');",
                          "    pm.expect(response.progress).to.have.property('total');",
                          "    pm.expect(response.progress).to.have.property('processed');",
                          "    pm.expect(response.progress).to.have.property('successful');",
                          "    pm.expect(response.progress).to.have.property('failed');",
                          "    pm.expect(response.progress).to.have.property('percentage');",
                          "});",
                          "",
                          "pm.test('Progress values are valid', function () {",
                          "    const response = pm.response.json();",
                          "    pm.expect(response.progress.total).to.be.at.least(0);",
                          "    pm.expect(response.progress.processed).to.be.at.least(0);",
                          "    pm.expect(response.progress.successful).to.be.at.least(0);",
                          "    pm.expect(response.progress.failed).to.be.at.least(0);",
                          "    pm.expect(response.progress.percentage).to.be.at.least(0);",
                          "    pm.expect(response.progress.percentage).to.be.at.most(100);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Get Import Errors",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{accessToken}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/bulk/import/{{importJobId}}/errors?page=1&limit=10",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        "bulk",
                        "import",
                        "{{importJobId}}",
                        "errors"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "1"
                        },
                        {
                          "key": "limit",
                          "value": "10"
                        }
                      ]
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Status code is 200', function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test('Errors response structure', function () {",
                          "    const response = pm.response.json();",
                          "    pm.expect(response).to.have.property('success');",
                          "    pm.expect(response).to.have.property('data');",
                          "    pm.expect(response.data).to.have.property('errors');",
                          "    pm.expect(response.data).to.have.property('total');",
                          "    pm.expect(response.data).to.have.property('pagination');",
                          "});",
                          "",
                          "pm.test('Errors array structure', function () {",
                          "    const response = pm.response.json();",
                          "    if (response.data.errors.length > 0) {",
                          "        const error = response.data.errors[0];",
                          "        pm.expect(error).to.have.property('id');",
                          "        pm.expect(error).to.have.property('rowNumber');",
                          "        pm.expect(error).to.have.property('errorMessage');",
                          "        pm.expect(error).to.have.property('createdAt');",
                          "    }",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Get Import Error Summary",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{accessToken}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/bulk/import/{{importJobId}}/errors/summary",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        "bulk-import",
                        "{{importJobId}}",
                        "errors",
                        "summary"
                      ]
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Status code is 200', function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test('Summary response structure', function () {",
                          "    const response = pm.response.json();",
                          "    pm.expect(response).to.have.property('success');",
                          "    pm.expect(response).to.have.property('data');",
                          "    pm.expect(response.data).to.have.property('totalErrors');",
                          "    pm.expect(response.data).to.have.property('errorTypes');",
                          "    pm.expect(response.data).to.have.property('commonErrors');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Export Import Errors to CSV",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{accessToken}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/bulk/import/{{importJobId}}/errors/export",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        "bulk-import",
                        "{{importJobId}}",
                        "errors",
                        "export"
                      ]
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Status code is 200', function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test('CSV content type', function () {",
                          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/csv');",
                          "});",
                          "",
                          "pm.test('File download header', function () {",
                          "    pm.expect(pm.response.headers.get('Content-Disposition')).to.include('attachment');",
                          "});",
                          "",
                          "pm.test('Response body is not empty', function () {",
                          "    pm.expect(pm.response.text()).to.not.be.empty;",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Cancel Import Job",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{accessToken}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/bulk/import/{{importJobId}}/cancel",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        "bulk-import",
                        "{{importJobId}}",
                        "cancel"
                      ]
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Status code is 200', function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test('Cancel response', function () {",
                          "    const response = pm.response.json();",
                          "    pm.expect(response).to.have.property('success');",
                          "    pm.expect(response.success).to.be.true;",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Retry Failed Import Job",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{accessToken}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/bulk/import/{{importJobId}}/retry",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        "bulk-import",
                        "{{importJobId}}",
                        "retry"
                      ]
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Status code is 200', function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test('Retry response', function () {",
                          "    const response = pm.response.json();",
                          "    pm.expect(response).to.have.property('success');",
                          "    pm.expect(response.success).to.be.true;",
                          "    pm.expect(response).to.have.property('data');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Get Recent Import Jobs",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{accessToken}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/bulk/import/jobs/recent?limit=5",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        "bulk",
                        "import",
                        "jobs",
                        "recent"
                      ],
                      "query": [
                        {
                          "key": "limit",
                          "value": "5"
                        }
                      ]
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Status code is 200', function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test('Recent jobs response', function () {",
                          "    const response = pm.response.json();",
                          "    pm.expect(response).to.have.property('success');",
                          "    pm.expect(response).to.have.property('data');",
                          "    pm.expect(response.data).to.be.an('array');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Get Import Job Statistics",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{accessToken}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/bulk/import/jobs/statistics",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        "bulk",
                        "import",
                        "jobs",
                        "statistics"
                      ]
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Status code is 200', function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test('Statistics response', function () {",
                          "    const response = pm.response.json();",
                          "    pm.expect(response).to.have.property('success');",
                          "    pm.expect(response).to.have.property('data');",
                          "    pm.expect(response.data).to.have.property('totalJobs');",
                          "    pm.expect(response.data).to.have.property('completedJobs');",
                          "    pm.expect(response.data).to.have.property('failedJobs');",
                          "    pm.expect(response.data).to.have.property('pendingJobs');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Validate Import File",
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "multipart/form-data"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer {{accessToken}}"
                      }
                    ],
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "file",
                          "type": "file",
                          "src": []
                        },
                        {
                          "key": "options",
                          "value": "{\n  \"mapping\": {\n    \"email\": \"Email\",\n    \"firstName\": \"First Name\",\n    \"lastName\": \"Last Name\",\n    \"role\": \"Role\"\n  },\n  \"validationRules\": {\n    \"skipHeaderRow\": true,\n    \"maxRecords\": 1000\n  }\n}",
                          "type": "text"
                        }
                      ]
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/bulk/import/validate",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        "bulk",
                        "import",
                        "validate"
                      ]
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Status code is 200', function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test('Validation response', function () {",
                          "    const response = pm.response.json();",
                          "    pm.expect(response).to.have.property('success');",
                          "    pm.expect(response).to.have.property('data');",
                          "    pm.expect(response.data).to.have.property('isValid');",
                          "    pm.expect(response.data).to.have.property('errors');",
                          "    pm.expect(response.data).to.have.property('warnings');",
                          "    pm.expect(response.data).to.have.property('suggestedMapping');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "Bulk Export Operations",
              "item": [
                {
                  "name": "Export Users to CSV",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{accessToken}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/bulk/export?format=csv&fields=email,firstName,lastName,role,status&role=user&status=active",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        "bulk",
                        "export"
                      ],
                      "query": [
                        {
                          "key": "format",
                          "value": "csv"
                        },
                        {
                          "key": "fields",
                          "value": "email,firstName,lastName,role,status"
                        },
                        {
                          "key": "role",
                          "value": "user"
                        },
                        {
                          "key": "status",
                          "value": "active"
                        }
                      ]
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Status code is 200', function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test('CSV content type', function () {",
                          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/csv');",
                          "});",
                          "",
                          "pm.test('File download header', function () {",
                          "    pm.expect(pm.response.headers.get('Content-Disposition')).to.include('attachment');",
                          "    pm.expect(pm.response.headers.get('Content-Disposition')).to.include('.csv');",
                          "});",
                          "",
                          "pm.test('Response body is not empty', function () {",
                          "    pm.expect(pm.response.text()).to.not.be.empty;",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Export Users to Excel",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{accessToken}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/bulk/export?format=xlsx&fields=email,firstName,lastName,role,status,createdAt&includeInactive=true",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        "bulk",
                        "export"
                      ],
                      "query": [
                        {
                          "key": "format",
                          "value": "xlsx"
                        },
                        {
                          "key": "fields",
                          "value": "email,firstName,lastName,role,status,createdAt"
                        },
                        {
                          "key": "includeInactive",
                          "value": "true"
                        }
                      ]
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Status code is 200', function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test('Excel content type', function () {",
                          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');",
                          "});",
                          "",
                          "pm.test('File download header', function () {",
                          "    pm.expect(pm.response.headers.get('Content-Disposition')).to.include('attachment');",
                          "    pm.expect(pm.response.headers.get('Content-Disposition')).to.include('.xlsx');",
                          "});",
                          "",
                          "pm.test('Response body is not empty', function () {",
                          "    pm.expect(pm.response.raw()).to.not.be.empty;",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Generate Import Template",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{accessToken}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/bulk/export/template?fields=email,firstName,lastName,role,status,phone,team",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        "bulk",
                        "export",
                        "template"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "email,firstName,lastName,role,status,phone,team"
                        }
                      ]
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Status code is 200', function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test('Template content type', function () {",
                          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/csv');",
                          "});",
                          "",
                          "pm.test('Template download header', function () {",
                          "    pm.expect(pm.response.headers.get('Content-Disposition')).to.include('attachment');",
                          "    pm.expect(pm.response.headers.get('Content-Disposition')).to.include('template');",
                          "});",
                          "",
                          "pm.test('Template contains headers', function () {",
                          "    const csvContent = pm.response.text();",
                          "    pm.expect(csvContent).to.include('Email');",
                          "    pm.expect(csvContent).to.include('First Name');",
                          "    pm.expect(csvContent).to.include('Last Name');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                },
                {
                  "name": "Get Export Statistics",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{accessToken}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/bulk/export/statistics?fields=email,firstName,lastName,role,status&role=user&status=active",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        "bulk",
                        "export",
                        "statistics"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "email,firstName,lastName,role,status"
                        },
                        {
                          "key": "role",
                          "value": "user"
                        },
                        {
                          "key": "status",
                          "value": "active"
                        }
                      ]
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Status code is 200', function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test('Statistics response', function () {",
                          "    const response = pm.response.json();",
                          "    pm.expect(response).to.have.property('success');",
                          "    pm.expect(response).to.have.property('data');",
                          "    pm.expect(response.data).to.have.property('totalUsers');",
                          "    pm.expect(response.data).to.have.property('filteredUsers');",
                          "    pm.expect(response.data).to.have.property('exportSize');",
                          "    pm.expect(response.data).to.have.property('estimatedTime');",
                          "});",
                          "",
                          "pm.test('Statistics values are valid', function () {",
                          "    const response = pm.response.json();",
                          "    pm.expect(response.data.totalUsers).to.be.at.least(0);",
                          "    pm.expect(response.data.filteredUsers).to.be.at.least(0);",
                          "    pm.expect(response.data.exportSize).to.be.at.least(0);",
                          "    pm.expect(response.data.estimatedTime).to.be.at.least(0);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "name": "Bulk Operations Dashboard",
              "item": [
                {
                  "name": "Get Bulk Operations Dashboard",
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer {{accessToken}}"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/bulk/dashboard",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        "bulk",
                        "dashboard"
                      ]
                    }
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test('Status code is 200', function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test('Dashboard response', function () {",
                          "    const response = pm.response.json();",
                          "    pm.expect(response).to.have.property('success');",
                          "    pm.expect(response).to.have.property('data');",
                          "    pm.expect(response.data).to.have.property('jobStats');",
                          "    pm.expect(response.data).to.have.property('recentJobs');",
                          "    pm.expect(response.data).to.have.property('stuckJobsCount');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "File Storage Management",
      "item": [
        {
          "name": "Upload File",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "key",
                  "value": "uploads/{{$timestamp}}/{{$randomUUID}}",
                  "type": "text"
                },
                {
                  "key": "metadata",
                  "value": "{\"category\":\"document\",\"uploadedBy\":\"{{userId}}\"}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/files/upload",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "files",
                "upload"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('File uploaded successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('key');",
                  "    pm.expect(response).to.have.property('url');",
                  "    pm.expect(response).to.have.property('size');",
                  "    pm.expect(response).to.have.property('mimeType');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('fileKey', response.key);",
                  "    pm.environment.set('fileUrl', response.url);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Download File",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/files/download?key={{fileKey}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "files",
                "download"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "{{fileKey}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('File downloaded successfully', function () {",
                  "    pm.expect(pm.response.body).to.not.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get File Metadata",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/files/metadata?key={{fileKey}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "files",
                "metadata"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "{{fileKey}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('File metadata retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('key');",
                  "    pm.expect(response).to.have.property('size');",
                  "    pm.expect(response).to.have.property('mimeType');",
                  "    pm.expect(response).to.have.property('lastModified');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get File Stream",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/files/stream?key={{fileKey}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "files",
                "stream"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "{{fileKey}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('File stream retrieved', function () {",
                  "    pm.expect(pm.response.body).to.not.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Generate Signed URL",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"key\": \"{{fileKey}}\",\n  \"expiresIn\": 3600\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/files/signed-url",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "files",
                "signed-url"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Signed URL generated', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('signedUrl');",
                  "    pm.expect(response.signedUrl).to.include('http');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('signedUrl', response.signedUrl);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Public URL",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/files/public-url?key={{fileKey}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "files",
                "public-url"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "{{fileKey}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Public URL retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('publicUrl');",
                  "    pm.expect(response.publicUrl).to.include('http');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Copy File",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sourceKey\": \"{{fileKey}}\",\n  \"destinationKey\": \"copies/{{$timestamp}}/{{$randomUUID}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/files/copy",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "files",
                "copy"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('File copied successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('key');",
                  "    pm.expect(response.key).to.not.equal('{{fileKey}}');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('copiedFileKey', response.key);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Move File",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sourceKey\": \"{{fileKey}}\",\n  \"destinationKey\": \"moved/{{$timestamp}}/{{$randomUUID}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/files/move",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "files",
                "move"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('File moved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('key');",
                  "    pm.expect(response.key).to.not.equal('{{fileKey}}');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('movedFileKey', response.key);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "List Files",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/files/list?prefix=uploads&maxKeys=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "files",
                "list"
              ],
              "query": [
                {
                  "key": "prefix",
                  "value": "uploads"
                },
                {
                  "key": "maxKeys",
                  "value": "10"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Files listed successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    if (response.length > 0) {",
                  "        pm.expect(response[0]).to.have.property('key');",
                  "        pm.expect(response[0]).to.have.property('size');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check File Exists",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/files/exists?key={{fileKey}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "files",
                "exists"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "{{fileKey}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('File existence checked', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('exists');",
                  "    pm.expect(response.exists).to.be.a('boolean');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete File",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/files?key={{fileKey}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "files"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "{{fileKey}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('File deleted successfully', function () {",
                  "    pm.expect(pm.response.body).to.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Storage Health Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/files/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "files",
                "health"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Storage health status retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    if (response.length > 0) {",
                  "        pm.expect(response[0]).to.have.property('provider');",
                  "        pm.expect(response[0]).to.have.property('status');",
                  "        pm.expect(response[0]).to.have.property('responseTime');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Available Providers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/files/providers",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "files",
                "providers"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Available providers retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    pm.expect(response).to.contain('local');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Teams",
      "item": [
        {
          "name": "Create Team",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Team created successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('description');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('createdAt');",
                  "    pm.expect(response).to.have.property('updatedAt');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('teamId', response.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Development Team\",\n  \"description\": \"Core development team for the project\",\n  \"managerId\": \"{{userId}}\",\n  \"settings\": {\n    \"allowMemberInvites\": true,\n    \"requireApproval\": false,\n    \"maxMembers\": 10\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/teams",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Teams",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Teams list retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('teams');",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response.teams).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/teams?page=1&limit=10&search=development&status=active",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "search",
                  "value": "development"
                },
                {
                  "key": "status",
                  "value": "active"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get My Teams",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User teams retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/teams/my-teams",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "my-teams"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Team by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Team details retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('description');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('createdAt');",
                  "    pm.expect(response).to.have.property('updatedAt');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/teams/{{teamId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "{{teamId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Team",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Team updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('name');",
                  "    pm.expect(response).to.have.property('description');",
                  "    pm.expect(response.name).to.equal('Updated Development Team');",
                  "    pm.expect(response.description).to.equal('Updated team description');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Development Team\",\n  \"description\": \"Updated team description\",\n  \"settings\": {\n    \"allowMemberInvites\": false,\n    \"requireApproval\": true,\n    \"maxMembers\": 15\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/teams/{{teamId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "{{teamId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Team",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/teams/{{teamId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "{{teamId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Team Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Team analytics retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('memberCount');",
                  "    pm.expect(response).to.have.property('activeMembers');",
                  "    pm.expect(response).to.have.property('pendingInvitations');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/teams/{{teamId}}/analytics",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "{{teamId}}",
                "analytics"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add Team Member",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Member added successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('teamId');",
                  "    pm.expect(response).to.have.property('userId');",
                  "    pm.expect(response).to.have.property('roleId');",
                  "    pm.expect(response).to.have.property('status');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('userId', response.userId);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{userId}}\",\n  \"roleId\": \"{{roleId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/teams/{{teamId}}/members",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "{{teamId}}",
                "members"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Team Members",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Team members retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('members');",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response.members).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/teams/{{teamId}}/members?page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "{{teamId}}",
                "members"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Team Member",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Member updated successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('roleId');",
                  "    pm.expect(response.roleId).to.equal('new-role-123');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"roleId\": \"new-role-123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/teams/{{teamId}}/members/{{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "{{teamId}}",
                "members",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Remove Team Member",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/teams/{{teamId}}/members/{{userId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "{{teamId}}",
                "members",
                "{{userId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Invite Team Member",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Invitation sent successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('teamId');",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('roleId');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('expiresAt');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('teamInvitationId', response.id);",
                  "    pm.environment.set('invitationToken', response.token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"newmember@example.com\",\n  \"roleId\": \"{{roleId}}\",\n  \"message\": \"You are invited to join our development team!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/teams/{{teamId}}/invitations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "{{teamId}}",
                "invitations"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Team Invitations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Team invitations retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('invitations');",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response.invitations).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/teams/{{teamId}}/invitations?page=1&limit=10&status=pending",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "{{teamId}}",
                "invitations"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "status",
                  "value": "pending"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Cancel Team Invitation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/teams/{{teamId}}/invitations/{{teamInvitationId}}/cancel",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "{{teamId}}",
                "invitations",
                "{{teamInvitationId}}",
                "cancel"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Accept Team Invitation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Invitation accepted successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('teamId');",
                  "    pm.expect(response).to.have.property('userId');",
                  "    pm.expect(response).to.have.property('roleId');",
                  "    pm.expect(response).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{invitationToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/teams/invitations/accept",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "invitations",
                "accept"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User Team Memberships",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has teams array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('teams');",
                  "    pm.expect(response.teams).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Each team has required properties', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.teams.length > 0) {",
                  "        const team = response.teams[0];",
                  "        pm.expect(team).to.have.property('id');",
                  "        pm.expect(team).to.have.property('name');",
                  "        pm.expect(team).to.have.property('membership');",
                  "        pm.expect(team.membership).to.have.property('roleName');",
                  "        pm.expect(team.membership).to.have.property('status');",
                  "    }",
                  "});",
                  "",
                  "// Store first team ID for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.teams.length > 0) {",
                  "        pm.environment.set('teamId', response.teams[0].id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/teams/switch/memberships",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "switch",
                "memberships"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Current Team Context",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has team and membership', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('team');",
                  "    pm.expect(response).to.have.property('membership');",
                  "});",
                  "",
                  "pm.test('Team has required properties', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.team).to.have.property('id');",
                  "    pm.expect(response.team).to.have.property('name');",
                  "    pm.expect(response.team).to.have.property('status');",
                  "});",
                  "",
                  "pm.test('Membership has required properties', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.membership).to.have.property('id');",
                  "    pm.expect(response.membership).to.have.property('roleName');",
                  "    pm.expect(response.membership).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/teams/switch/current",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "switch",
                "current"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Switch Team",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response indicates success', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('Response has team information', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('team');",
                  "    pm.expect(response.team).to.have.property('id');",
                  "    pm.expect(response.team).to.have.property('name');",
                  "});",
                  "",
                  "pm.test('Response has membership information', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('membership');",
                  "    pm.expect(response.membership).to.have.property('roleName');",
                  "    pm.expect(response.membership).to.have.property('status');",
                  "});",
                  "",
                  "pm.test('Response has new access token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('accessToken');",
                  "    pm.expect(response.accessToken).to.be.a('string');",
                  "});",
                  "",
                  "// Update auth token for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"teamId\": \"{{teamId}}\",\n  \"notifyTeamMembers\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/teams/switch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "switch"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify Team Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access status', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('hasAccess');",
                  "    pm.expect(response.hasAccess).to.be.a('boolean');",
                  "});",
                  "",
                  "pm.test('Response includes team info when access granted', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.hasAccess) {",
                  "        pm.expect(response).to.have.property('team');",
                  "        pm.expect(response).to.have.property('membership');",
                  "        pm.expect(response.team).to.have.property('id');",
                  "        pm.expect(response.membership).to.have.property('roleName');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/teams/switch/{{teamId}}/verify-access",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "switch",
                "{{teamId}}",
                "verify-access"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Available Teams",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has teams array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('teams');",
                  "    pm.expect(response.teams).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Each team has required properties', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.teams.length > 0) {",
                  "        const team = response.teams[0];",
                  "        pm.expect(team).to.have.property('id');",
                  "        pm.expect(team).to.have.property('name');",
                  "        pm.expect(team).to.have.property('role');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/teams/switch/available",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "switch",
                "available"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Switch Team with Notifications",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Team switch successful with notifications', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.message).to.include('Successfully switched');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"teamId\": \"{{teamId}}\",\n  \"notifyTeamMembers\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/teams/switch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "switch"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Switch to Unauthorized Team (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Error message indicates access denied', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('access');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"teamId\": \"unauthorized-team-id\",\n  \"notifyTeamMembers\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/teams/switch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "switch"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Switch Team with Invalid ID (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message indicates validation failure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"teamId\": \"invalid-uuid\",\n  \"notifyTeamMembers\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/teams/switch",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "teams",
                "switch"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Invitation Management",
      "item": [
        {
          "name": "Create Invitation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has invitation data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('token');",
                  "    pm.expect(response.status).to.equal('pending');",
                  "});",
                  "",
                  "pm.test('Email is converted to lowercase', function () {",
                  "    const response = pm.response.json();",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(response.email).to.equal(requestBody.email.toLowerCase());",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('invitationId', response.id);",
                  "    pm.collectionVariables.set('invitationToken', response.token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"newuser@example.com\",\n  \"type\": \"team_member\",\n  \"roleId\": \"{{roleId}}\",\n  \"message\": \"Welcome to our team!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/invitations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "invitations"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Invitations List",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('invitations');",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response).to.have.property('page');",
                  "    pm.expect(response).to.have.property('limit');",
                  "    pm.expect(response).to.have.property('totalPages');",
                  "    pm.expect(response.invitations).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Invitations have required fields', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.invitations.length > 0) {",
                  "        const invitation = response.invitations[0];",
                  "        pm.expect(invitation).to.have.property('id');",
                  "        pm.expect(invitation).to.have.property('email');",
                  "        pm.expect(invitation).to.have.property('status');",
                  "        pm.expect(invitation).to.have.property('type');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/invitations?page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "invitations"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Invitation by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has invitation details', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response).to.have.property('type');",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response).to.have.property('expiresAt');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/invitations/{{invitationId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "invitations",
                "{{invitationId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Invitation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response.message).to.equal('Updated invitation message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Updated invitation message\",\n  \"roleId\": \"{{roleId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/invitations/{{invitationId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "invitations",
                "{{invitationId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Resend Invitation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has invitation data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('email');",
                  "    pm.expect(response).to.have.property('status');",
                  "    pm.expect(response.status).to.equal('pending');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/invitations/{{invitationId}}/resend",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "invitations",
                "{{invitationId}}",
                "resend"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Revoke Invitation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/invitations/{{invitationId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "invitations",
                "{{invitationId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Invitation Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has statistics structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('total');",
                  "    pm.expect(response).to.have.property('pending');",
                  "    pm.expect(response).to.have.property('accepted');",
                  "    pm.expect(response).to.have.property('expired');",
                  "    pm.expect(response).to.have.property('revoked');",
                  "    pm.expect(response).to.have.property('acceptanceRate');",
                  "    pm.expect(response.total).to.be.a('number');",
                  "    pm.expect(response.acceptanceRate).to.be.a('number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/invitations/stats",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "invitations",
                "stats"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Invitation Acceptance",
      "item": [
        {
          "name": "Accept Invitation - New User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user and invitation data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response).to.have.property('invitation');",
                  "    pm.expect(response.user).to.have.property('id');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "    pm.expect(response.invitation).to.have.property('id');",
                  "    pm.expect(response.invitation).to.have.property('status');",
                  "    pm.expect(response.invitation.status).to.equal('accepted');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"password\": \"SecurePassword123!\",\n  \"requestInfo\": {\n    \"ipAddress\": \"192.168.1.1\",\n    \"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/invitations/accept/{{invitationToken}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "invitations",
                "accept",
                "{{invitationToken}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Accept Invitation - Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error message indicates invalid token', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.message).to.include('Invalid invitation token');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"password\": \"SecurePassword123!\",\n  \"requestInfo\": {\n    \"ipAddress\": \"192.168.1.2\",\n    \"userAgent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/invitations/accept/invalid-token",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "invitations",
                "accept",
                "invalid-token"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Delegations",
      "item": [
        {
          "name": "Create Delegation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"delegateId\": \"{{delegateId}}\",\n  \"title\": \"Test Delegation\",\n  \"description\": \"Delegation for testing purposes\",\n  \"delegationType\": \"permission_based\",\n  \"expiresAt\": \"{{$timestamp}}\",\n  \"permissionIds\": [\"{{permissionId}}\"],\n  \"requiresApproval\": true,\n  \"approverId\": \"{{approverId}}\",\n  \"isEmergency\": false,\n  \"isRecurring\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/delegations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "delegations"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has delegation data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('id');",
                  "  pm.expect(response).to.have.property('title');",
                  "  pm.expect(response).to.have.property('status');",
                  "  pm.expect(response.status).to.eql('pending');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "  const response = pm.response.json();",
                  "  pm.environment.set('delegationId', response.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Delegations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/delegations?page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "delegations"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has delegations array', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('delegations');",
                  "  pm.expect(response.delegations).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response has pagination info', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('total');",
                  "  pm.expect(response).to.have.property('page');",
                  "  pm.expect(response).to.have.property('limit');",
                  "  pm.expect(response).to.have.property('totalPages');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Delegation by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/delegations/{{delegationId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "delegations",
                "{{delegationId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has delegation details', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('id');",
                  "  pm.expect(response).to.have.property('title');",
                  "  pm.expect(response).to.have.property('status');",
                  "  pm.expect(response).to.have.property('delegator');",
                  "  pm.expect(response).to.have.property('delegate');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Approve Delegation",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"approvalNotes\": \"Approved for testing purposes\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/delegations/{{delegationId}}/approve",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "delegations",
                "{{delegationId}}",
                "approve"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Delegation is approved', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.status).to.eql('approved');",
                  "  pm.expect(response).to.have.property('approvedAt');",
                  "  pm.expect(response).to.have.property('approvalNotes');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Reject Delegation",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"rejectionReason\": \"Rejected for testing purposes\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/delegations/{{delegationId}}/reject",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "delegations",
                "{{delegationId}}",
                "reject"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Delegation is rejected', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.status).to.eql('rejected');",
                  "  pm.expect(response).to.have.property('rejectedAt');",
                  "  pm.expect(response).to.have.property('rejectionReason');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Activate Delegation",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"confirmActivation\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/delegations/{{delegationId}}/activate",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "delegations",
                "{{delegationId}}",
                "activate"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Delegation is activated', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.status).to.eql('active');",
                  "  pm.expect(response).to.have.property('activatedAt');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Revoke Delegation",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"revocationReason\": \"Revoked for testing purposes\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/delegations/{{delegationId}}/revoke",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "delegations",
                "{{delegationId}}",
                "revoke"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Delegation is revoked', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.status).to.eql('revoked');",
                  "  pm.expect(response).to.have.property('revokedAt');",
                  "  pm.expect(response).to.have.property('revocationReason');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get My Active Delegations",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/delegations/my-active",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "delegations",
                "my-active"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('All delegations are active', function () {",
                  "  const response = pm.response.json();",
                  "  response.forEach(delegation => {",
                  "    pm.expect(delegation.status).to.eql('active');",
                  "  });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Pending Approvals",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/delegations/pending-approvals",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "delegations",
                "pending-approvals"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('All delegations are pending', function () {",
                  "  const response = pm.response.json();",
                  "  response.forEach(delegation => {",
                  "    pm.expect(delegation.status).to.eql('pending');",
                  "  });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Delegation Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/delegations/stats",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "delegations",
                "stats"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has statistics', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('totalDelegations');",
                  "  pm.expect(response).to.have.property('activeDelegations');",
                  "  pm.expect(response).to.have.property('pendingApprovals');",
                  "  pm.expect(response).to.have.property('expiredDelegations');",
                  "  pm.expect(response).to.have.property('revokedDelegations');",
                  "  pm.expect(response).to.have.property('emergencyDelegations');",
                  "  pm.expect(response).to.have.property('delegationsThisMonth');",
                  "  pm.expect(response).to.have.property('averageDelegationDuration');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Delegation Audit Logs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/delegations/{{delegationId}}/audit-logs",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "delegations",
                "{{delegationId}}",
                "audit-logs"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Audit logs have required fields', function () {",
                  "  const response = pm.response.json();",
                  "  if (response.length > 0) {",
                  "    const log = response[0];",
                  "    pm.expect(log).to.have.property('id');",
                  "    pm.expect(log).to.have.property('action');",
                  "    pm.expect(log).to.have.property('createdAt');",
                  "  }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Delegations by Delegator",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/delegations/delegator/{{delegatorId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "delegations",
                "delegator",
                "{{delegatorId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('All delegations belong to the delegator', function () {",
                  "  const response = pm.response.json();",
                  "  response.forEach(delegation => {",
                  "    pm.expect(delegation.delegatorId).to.eql(pm.environment.get('delegatorId'));",
                  "  });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Delegations by Delegate",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/delegations/delegate/{{delegateId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "delegations",
                "delegate",
                "{{delegateId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('All delegations belong to the delegate', function () {",
                  "  const response = pm.response.json();",
                  "  response.forEach(delegation => {",
                  "    pm.expect(delegation.delegateId).to.eql(pm.environment.get('delegateId'));",
                  "  });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Delegation Permissions",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{delegateId}}\",\n  \"permissionIds\": [\"{{permissionId}}\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/delegations/check-permissions",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "delegations",
                "check-permissions"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has hasDelegation field', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('hasDelegation');",
                  "  pm.expect(response.hasDelegation).to.be.a('boolean');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Analytics",
      "item": [
        {
          "name": "Track Event",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventType\": \"user_login\",\n  \"eventName\": \"User Login\",\n  \"description\": \"User logged in successfully\",\n  \"metricType\": \"count\",\n  \"metricValue\": 1,\n  \"metadata\": {\n    \"browser\": \"Chrome\",\n    \"os\": \"Windows\",\n    \"ip\": \"192.168.1.1\"\n  },\n  \"sessionId\": \"session-123\",\n  \"ipAddress\": \"192.168.1.1\",\n  \"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/analytics/events/track",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "events",
                "track"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has event ID', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('id');",
                  "  pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "  const response = pm.response.json();",
                  "  pm.environment.set('analyticsEventId', response.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Bulk Track Events",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"events\": [\n    {\n      \"eventType\": \"user_login\",\n      \"eventName\": \"User Login 1\",\n      \"metricValue\": 1\n    },\n    {\n      \"eventType\": \"user_logout\",\n      \"eventName\": \"User Logout 1\",\n      \"metricValue\": 1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/analytics/events/track/bulk",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "events",
                "track",
                "bulk"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success count', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('successCount');",
                  "  pm.expect(response).to.have.property('failureCount');",
                  "  pm.expect(response).to.have.property('eventIds');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Events",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/events?limit=10&offset=0&sortBy=timestamp&sortOrder=DESC",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "events"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "offset",
                  "value": "0"
                },
                {
                  "key": "sortBy",
                  "value": "timestamp"
                },
                {
                  "key": "sortOrder",
                  "value": "DESC"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Aggregates",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/aggregates?period=day&limit=20",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "aggregates"
              ],
              "query": [
                {
                  "key": "period",
                  "value": "day"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Dashboard",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/dashboard?period=day",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "dashboard"
              ],
              "query": [
                {
                  "key": "period",
                  "value": "day"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has summary', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('summary');",
                  "  pm.expect(response).to.have.property('recentEvents');",
                  "  pm.expect(response).to.have.property('aggregates');",
                  "  pm.expect(response).to.have.property('trends');",
                  "  pm.expect(response).to.have.property('topResources');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Summary",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/summary?period=day",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "summary"
              ],
              "query": [
                {
                  "key": "period",
                  "value": "day"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has key metrics', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('totalEvents');",
                  "  pm.expect(response).to.have.property('uniqueUsers');",
                  "  pm.expect(response).to.have.property('activeSessions');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Real-time Metrics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/realtime",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "realtime"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has real-time data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('activeUsers');",
                  "  pm.expect(response).to.have.property('activeSessions');",
                  "  pm.expect(response).to.have.property('eventsPerMinute');",
                  "  pm.expect(response).to.have.property('systemHealth');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Alert",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"alertName\": \"High Login Rate\",\n  \"description\": \"Alert when login rate exceeds threshold\",\n  \"severity\": \"high\",\n  \"metricName\": \"user_login\",\n  \"condition\": \"gt\",\n  \"threshold\": 100,\n  \"isActive\": true,\n  \"metadata\": {\n    \"notificationEmail\": \"admin@example.com\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/analytics/alerts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "alerts"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has alert ID', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('id');",
                  "  pm.expect(response.alertName).to.eql('High Login Rate');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "  const response = pm.response.json();",
                  "  pm.environment.set('analyticsAlertId', response.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Alerts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/alerts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "alerts"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Alert by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/alerts/{{analyticsAlertId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "alerts",
                "{{analyticsAlertId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has alert details', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('id');",
                  "  pm.expect(response).to.have.property('alertName');",
                  "  pm.expect(response).to.have.property('severity');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Alert",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"alertName\": \"Updated High Login Rate\",\n  \"isActive\": false,\n  \"threshold\": 150\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/analytics/alerts/{{analyticsAlertId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "alerts",
                "{{analyticsAlertId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated alert', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.alertName).to.eql('Updated High Login Rate');",
                  "  pm.expect(response.isActive).to.be.false;",
                  "  pm.expect(response.threshold).to.eql(150);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Alert",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/alerts/{{analyticsAlertId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "alerts",
                "{{analyticsAlertId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "  pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Generate Report",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reportType\": \"usage\",\n  \"reportName\": \"Monthly Usage Report\",\n  \"description\": \"Comprehensive usage analytics report\",\n  \"startDate\": \"2024-01-01\",\n  \"endDate\": \"2024-01-31\",\n  \"format\": \"pdf\",\n  \"metrics\": [\"user_activity\", \"feature_usage\", \"performance\"],\n  \"filters\": [\"active_users_only\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/analytics/reports",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "reports"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has report ID', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('id');",
                  "  pm.expect(response.status).to.eql('pending');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "  const response = pm.response.json();",
                  "  pm.environment.set('reportId', response.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Report",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/reports/{{reportId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "reports",
                "{{reportId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has report details', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('id');",
                  "  pm.expect(response).to.have.property('reportType');",
                  "  pm.expect(response).to.have.property('status');",
                  "  pm.expect(response).to.have.property('format');",
                  "});",
                  "",
                  "pm.test('Report belongs to correct tenant', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.metadata.tenantId).to.eql(pm.environment.get('tenantId'));",
                  "});",
                  "",
                  "pm.test('Check if PDF download URL is available', function () {",
                  "  const response = pm.response.json();",
                  "  if (response.status === 'completed' && response.format === 'pdf') {",
                  "    pm.expect(response.downloadUrl).to.not.be.empty;",
                  "    pm.expect(response.storageKey).to.not.be.empty;",
                  "  }",
                  "});",
                  "",
                  "pm.test('Check if storage URL is provided', function () {",
                  "  const response = pm.response.json();",
                  "  if (response.status === 'completed' && response.format === 'pdf') {",
                  "    if (response.downloadUrl.startsWith('http')) {",
                  "      pm.expect(response.downloadUrl).to.include('http');",
                  "    }",
                  "  }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Download Report",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/reports/{{reportId}}/download",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "reports",
                "{{reportId}}",
                "download"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is PDF content', function () {",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                  "});",
                  "",
                  "pm.test('Response has Content-Disposition header', function () {",
                  "  pm.expect(pm.response.headers.get('Content-Disposition')).to.include('attachment');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Export Analytics",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"startDate\": \"2024-01-01\",\n  \"endDate\": \"2024-01-31\",\n  \"format\": \"csv\",\n  \"includeMetadata\": true,\n  \"includeUserInfo\": false,\n  \"eventTypes\": [\"user_login\", \"user_logout\", \"feature_access\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/analytics/export",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "export"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has export ID', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('id');",
                  "  pm.expect(response.status).to.eql('pending');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "  const response = pm.response.json();",
                  "  pm.environment.set('exportId', response.id);",
                  "}"
                ],
                "type": "text-javascript"
              }
            }
          ]
        },
        {
          "name": "Get Health Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "health"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has health status', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('status');",
                  "  pm.expect(response).to.have.property('checks');",
                  "  pm.expect(response).to.have.property('metrics');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Event Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/stats/events?startDate=2024-01-01&endDate=2024-01-31",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "stats",
                "events"
              ],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-01-31"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has event statistics', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('totalEvents');",
                  "  pm.expect(response).to.have.property('uniqueUsers');",
                  "  pm.expect(response).to.have.property('eventTypes');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get User Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/stats/users?startDate=2024-01-01&endDate=2024-01-31",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "stats",
                "users"
              ],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-01-31"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user statistics', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('activeUsers');",
                  "  pm.expect(response).to.have.property('totalUserEvents');",
                  "  pm.expect(response).to.have.property('averageEventsPerUser');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Performance Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/stats/performance",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "stats",
                "performance"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has performance data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('realTime');",
                  "  pm.expect(response).to.have.property('systemHealth');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Custom Metric",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/custom/user_login?startDate=2024-01-01&endDate=2024-01-31&groupBy=hour",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "custom",
                "user_login"
              ],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-01-31"
                },
                {
                  "key": "groupBy",
                  "value": "hour"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has custom metric data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('metricName');",
                  "  pm.expect(response).to.have.property('data');",
                  "  pm.expect(response).to.have.property('period');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Export by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/export/{{exportId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "export",
                "{{exportId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has export details', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('id');",
                  "  pm.expect(response).to.have.property('status');",
                  "  pm.expect(response).to.have.property('format');",
                  "  pm.expect(response).to.have.property('downloadUrl');",
                  "});",
                  "",
                  "pm.test('Export belongs to correct tenant', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response.metadata.tenantId).to.eql(pm.environment.get('tenantId'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Data Cleanup",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/cleanup?olderThan=2024-01-01",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "cleanup"
              ],
              "query": [
                {
                  "key": "olderThan",
                  "value": "2024-01-01"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "  pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Data cleanup completed successfully', function () {",
                  "  pm.expect(pm.response.code).to.equal(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Subscription Plans",
      "item": [
        {
          "name": "Get All Subscription Plans",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscription-plans?isActive=true&planType=premium&billingCycle=monthly",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscription-plans"
              ],
              "query": [
                {
                  "key": "isActive",
                  "value": "true"
                },
                {
                  "key": "planType",
                  "value": "premium"
                },
                {
                  "key": "billingCycle",
                  "value": "monthly"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "  pm.expect(pm.response.json()).to.be.an('array');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "  const plans = pm.response.json();",
                  "  if (plans.length > 0) {",
                  "    pm.environment.set('planId', plans[0].id);",
                  "    pm.environment.set('planName', plans[0].name);",
                  "  }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Subscription Plan by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscription-plans/{{planId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscription-plans",
                "{{planId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has plan data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('id');",
                  "  pm.expect(response).to.have.property('name');",
                  "  pm.expect(response).to.have.property('price');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Popular Plans",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscription-plans/popular/plans",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscription-plans",
                "popular",
                "plans"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "  pm.expect(pm.response.json()).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Subscription Plans Health Check",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscription-plans/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscription-plans",
                "health"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has health status', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('status', 'healthy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Subscription Usage Tracking",
      "item": [
        {
          "name": "Record Usage",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"subscriptionId\": \"{{subscriptionId}}\",\n  \"tenantId\": \"{{tenantId}}\",\n  \"metricType\": \"api_calls\",\n  \"metricName\": \"api_calls\",\n  \"quantity\": 100,\n  \"unitPrice\": 0.01,\n  \"periodStart\": \"2024-01-01\",\n  \"periodEnd\": \"2024-02-01\",\n  \"metadata\": {\n    \"source\": \"api\",\n    \"endpoint\": \"/api/users\"\n  },\n  \"tags\": {\n    \"environment\": \"production\",\n    \"service\": \"user-service\"\n  },\n  \"notes\": \"API usage tracking for user management\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/usage/record",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "usage",
                "record"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('success');",
                  "  pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has usage data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('usage');",
                  "  pm.expect(response.usage).to.have.property('id');",
                  "  pm.expect(response.usage).to.have.property('quantity');",
                  "});",
                  "",
                  "pm.test('Response has alerts array', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('alerts');",
                  "  pm.expect(response.alerts).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Bulk Record Usage",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"usageRecords\": [\n    {\n      \"subscriptionId\": \"{{subscriptionId}}\",\n      \"tenantId\": \"{{tenantId}}\",\n      \"metricType\": \"api_calls\",\n      \"metricName\": \"api_calls\",\n      \"quantity\": 150,\n      \"unitPrice\": 0.01,\n      \"periodStart\": \"2024-01-01\",\n      \"periodEnd\": \"2024-02-01\",\n      \"metadata\": {\n        \"source\": \"api\"\n      }\n    },\n    {\n      \"subscriptionId\": \"{{subscriptionId}}\",\n      \"tenantId\": \"{{tenantId}}\",\n      \"metricType\": \"storage\",\n      \"metricName\": \"storage\",\n      \"quantity\": 500,\n      \"unitPrice\": 0.05,\n      \"periodStart\": \"2024-01-01\",\n      \"periodEnd\": \"2024-02-01\",\n      \"metadata\": {\n        \"source\": \"file-upload\"\n      }\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/usage/bulk-record",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "usage",
                "bulk-record"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('success');",
                  "  pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has usage records array', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('usageRecords');",
                  "  pm.expect(response.usageRecords).to.be.an('array');",
                  "  pm.expect(response.usageRecords.length).to.be.greaterThan(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Current Usage",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/usage/{{subscriptionId}}/current",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "usage",
                "{{subscriptionId}}",
                "current"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('success');",
                  "  pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has usage data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('usage');",
                  "  pm.expect(response.usage).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Usage Limits",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/usage/{{subscriptionId}}/limits",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "usage",
                "{{subscriptionId}}",
                "limits"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('success');",
                  "  pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has limits array', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('limits');",
                  "  pm.expect(response.limits).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Each limit has required properties', function () {",
                  "  const response = pm.response.json();",
                  "  if (response.limits.length > 0) {",
                  "    const limit = response.limits[0];",
                  "    pm.expect(limit).to.have.property('metricName');",
                  "    pm.expect(limit).to.have.property('limit');",
                  "    pm.expect(limit).to.have.property('currentUsage');",
                  "    pm.expect(limit).to.have.property('percentage');",
                  "  }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Usage Alerts",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/usage/{{subscriptionId}}/alerts",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "usage",
                "{{subscriptionId}}",
                "alerts"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('success');",
                  "  pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has alerts array', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('alerts');",
                  "  pm.expect(response.alerts).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Usage Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/usage/{{subscriptionId}}/analytics?startDate=2024-01-01&endDate=2024-02-01",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "usage",
                "{{subscriptionId}}",
                "analytics"
              ],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-02-01"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('success');",
                  "  pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has analytics data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('analytics');",
                  "  pm.expect(response.analytics).to.have.property('totalUsage');",
                  "  pm.expect(response.analytics).to.have.property('usageByMetric');",
                  "  pm.expect(response.analytics).to.have.property('usageTrends');",
                  "  pm.expect(response.analytics).to.have.property('topMetrics');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Usage History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/usage/{{subscriptionId}}/history?limit=50",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "usage",
                "{{subscriptionId}}",
                "history"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "50"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('success');",
                  "  pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has history array', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('history');",
                  "  pm.expect(response.history).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Usage History by Metric",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/usage/{{subscriptionId}}/history?metricName=api_calls&limit=20",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "usage",
                "{{subscriptionId}}",
                "history"
              ],
              "query": [
                {
                  "key": "metricName",
                  "value": "api_calls"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('success');",
                  "  pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has filtered history', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('history');",
                  "  pm.expect(response.history).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Tenant Usage Summary",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/usage/tenant/summary?startDate=2024-01-01&endDate=2024-02-01",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "usage",
                "tenant",
                "summary"
              ],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-02-01"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success property', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('success');",
                  "  pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has summary data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('summary');",
                  "  pm.expect(response.summary).to.have.property('totalSubscriptions');",
                  "  pm.expect(response.summary).to.have.property('activeSubscriptions');",
                  "  pm.expect(response.summary).to.have.property('totalUsage');",
                  "  pm.expect(response.summary).to.have.property('usageByMetric');",
                  "  pm.expect(response.summary).to.have.property('topSubscriptions');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Billing & Invoices",
      "item": [
        {
          "name": "Create Invoice",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"subscription\",\n  \"customerId\": \"{{customerId}}\",\n  \"subscriptionId\": \"{{subscriptionId}}\",\n  \"billingAddress\": {\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"addressLine1\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postalCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"lineItems\": [\n    {\n      \"type\": \"subscription\",\n      \"description\": \"Monthly subscription plan\",\n      \"quantity\": 1,\n      \"unitPrice\": 99.99,\n      \"taxRate\": 0.1\n    }\n  ],\n  \"paymentTerms\": \"net_30\",\n  \"notes\": \"Thank you for your business!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/billing/invoices",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "billing",
                "invoices"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has invoice data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('success', true);",
                  "  pm.expect(response).to.have.property('data');",
                  "  pm.expect(response.data).to.have.property('id');",
                  "  pm.expect(response.data).to.have.property('invoiceNumber');",
                  "  pm.environment.set('invoiceId', response.data.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Invoices",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/billing/invoices?page=1&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "billing",
                "invoices"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has invoices data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('success', true);",
                  "  pm.expect(response).to.have.property('data');",
                  "  pm.expect(response).to.have.property('pagination');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Billing Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/billing/analytics?startDate=2024-01-01&endDate=2024-12-31",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "billing",
                "analytics"
              ],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has analytics data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('success', true);",
                  "  pm.expect(response).to.have.property('data');",
                  "  pm.expect(response.data).to.have.property('totalRevenue');",
                  "  pm.expect(response.data).to.have.property('totalInvoices');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Subscriptions",
      "item": [
        {
          "name": "Create Subscription",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{tenantId}}\",\n  \"userId\": \"{{userId}}\",\n  \"name\": \"Premium Subscription\",\n  \"description\": \"Premium plan with advanced features\",\n  \"status\": \"active\",\n  \"billingCycle\": \"monthly\",\n  \"amount\": 99.99,\n  \"currency\": \"USD\",\n  \"quantity\": 1,\n  \"unitPrice\": 99.99,\n  \"startDate\": \"2024-01-01T00:00:00.000Z\",\n  \"trialEndDate\": \"2024-01-15T00:00:00.000Z\",\n  \"trialDays\": 14,\n  \"isTrial\": true,\n  \"autoRenew\": true,\n  \"planId\": \"{{planId}}\",\n  \"metadata\": {\n    \"source\": \"api\",\n    \"campaign\": \"premium_upgrade\"\n  },\n  \"features\": {\n    \"api_calls\": 10000,\n    \"storage_gb\": 100,\n    \"users\": 50\n  },\n  \"limits\": {\n    \"max_projects\": 25,\n    \"max_team_members\": 50\n  },\n  \"gracePeriodDays\": 7,\n  \"notes\": \"Premium subscription created via API\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "  const response = pm.response.json();",
                  "  pm.environment.set('subscriptionId', response.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Subscriptions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions?tenantId={{tenantId}}&status=active",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions"
              ],
              "query": [
                {
                  "key": "tenantId",
                  "value": "{{tenantId}}"
                },
                {
                  "key": "status",
                  "value": "active"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "  pm.expect(pm.response.json()).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Subscription by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/{{subscriptionId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "{{subscriptionId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has subscription data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('id');",
                  "  pm.expect(response).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Subscription",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Premium Subscription\",\n  \"description\": \"Updated premium plan with enhanced features\",\n  \"status\": \"active\",\n  \"billingCycle\": \"annually\",\n  \"amount\": 999.99,\n  \"currency\": \"USD\",\n  \"quantity\": 1,\n  \"unitPrice\": 999.99,\n  \"autoRenew\": true,\n  \"metadata\": {\n    \"source\": \"api\",\n    \"updated_at\": \"2024-01-15T10:30:00.000Z\"\n  },\n  \"features\": {\n    \"api_calls\": 50000,\n    \"storage_gb\": 500,\n    \"users\": 100\n  },\n  \"limits\": {\n    \"max_projects\": 50,\n    \"max_team_members\": 100\n  },\n  \"gracePeriodDays\": 14,\n  \"notes\": \"Subscription upgraded to annual billing\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/{{subscriptionId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "{{subscriptionId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Cancel Subscription",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"user_request\",\n  \"customReason\": \"User requested cancellation due to budget constraints\",\n  \"cancelAtPeriodEnd\": true,\n  \"prorate\": false,\n  \"invoiceNow\": false,\n  \"notes\": \"Customer requested cancellation at period end\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/{{subscriptionId}}/cancel",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "{{subscriptionId}}",
                "cancel"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Reactivate Subscription",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/{{subscriptionId}}/reactivate",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "{{subscriptionId}}",
                "reactivate"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Suspend Subscription",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Payment failed - card declined\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/{{subscriptionId}}/suspend",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "{{subscriptionId}}",
                "suspend"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Subscription",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/{{subscriptionId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "{{subscriptionId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "  pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Subscription by Stripe ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/stripe/{{stripeSubscriptionId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "stripe",
                "{{stripeSubscriptionId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Can Upgrade",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/{{subscriptionId}}/can-upgrade/{{targetPlanId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "{{subscriptionId}}",
                "can-upgrade",
                "{{targetPlanId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has upgrade info', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('canUpgrade');",
                  "  pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Can Downgrade",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/{{subscriptionId}}/can-downgrade/{{targetPlanId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "{{subscriptionId}}",
                "can-downgrade",
                "{{targetPlanId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has downgrade info', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('canDowngrade');",
                  "  pm.expect(response).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Calculate Proration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"newAmount\": 149.99,\n  \"effectiveDate\": \"2024-01-15T00:00:00.000Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/{{subscriptionId}}/calculate-proration",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "{{subscriptionId}}",
                "calculate-proration"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has proration data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('prorationAmount');",
                  "  pm.expect(response).to.have.property('creditAmount');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Validate Limits",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"usageData\": {\n    \"api_calls\": 1500,\n    \"storage_gb\": 5.2,\n    \"users\": 25,\n    \"projects\": 8,\n    \"features\": 12\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/subscriptions/{{subscriptionId}}/validate-limits",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "{{subscriptionId}}",
                "validate-limits"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has validation data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('isValid');",
                  "  pm.expect(response).to.have.property('errors');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Subscription Health Check",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscriptions/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "subscriptions",
                "health"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has health status', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('status', 'healthy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Billing Management",
      "item": [
        {
          "name": "Create Invoice",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"subscription\",\n  \"customerId\": \"{{customerId}}\",\n  \"subscriptionId\": \"{{subscriptionId}}\",\n  \"billingAddress\": {\n    \"name\": \"John Doe\",\n    \"company\": \"Acme Corp\",\n    \"addressLine1\": \"123 Main St\",\n    \"addressLine2\": \"Suite 100\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postalCode\": \"10001\",\n    \"country\": \"US\",\n    \"phone\": \"+1-555-123-4567\",\n    \"email\": \"john.doe@acme.com\"\n  },\n  \"shippingAddress\": {\n    \"name\": \"John Doe\",\n    \"company\": \"Acme Corp\",\n    \"addressLine1\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postalCode\": \"10001\",\n    \"country\": \"US\"\n  },\n  \"lineItems\": [\n    {\n      \"type\": \"subscription\",\n      \"description\": \"Premium Monthly Subscription\",\n      \"quantity\": 1,\n      \"unitPrice\": 99.99,\n      \"taxRate\": 8.25,\n      \"discountAmount\": 0,\n      \"metadata\": {\n        \"plan_id\": \"premium_monthly\",\n        \"billing_period\": \"2024-01-01 to 2024-01-31\"\n      },\n      \"subscriptionId\": \"{{subscriptionId}}\",\n      \"periodStart\": \"2024-01-01\",\n      \"periodEnd\": \"2024-01-31\"\n    }\n  ],\n  \"paymentTerms\": \"net_30\",\n  \"dueDate\": \"2024-02-15T00:00:00.000Z\",\n  \"notes\": \"Monthly subscription invoice for premium plan\",\n  \"footer\": \"Thank you for your business!\",\n  \"metadata\": {\n    \"invoice_source\": \"api\",\n    \"campaign\": \"monthly_billing\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/billing/invoices",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "billing",
                "invoices"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "  pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "  const response = pm.response.json();",
                  "  pm.environment.set('invoiceId', response.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Invoices",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/billing/invoices?tenantId={{tenantId}}&status=PAID&limit=20&offset=0",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "billing",
                "invoices"
              ],
              "query": [
                {
                  "key": "tenantId",
                  "value": "{{tenantId}}"
                },
                {
                  "key": "status",
                  "value": "PAID"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array', function () {",
                  "  pm.expect(pm.response.json()).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Invoice by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/billing/invoices/{{invoiceId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "billing",
                "invoices",
                "{{invoiceId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has invoice data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('id');",
                  "  pm.expect(response).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Invoice",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"sent\",\n  \"billingAddress\": {\n    \"name\": \"John Doe\",\n    \"company\": \"Acme Corp Updated\",\n    \"addressLine1\": \"456 Updated St\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postalCode\": \"10001\",\n    \"country\": \"US\",\n    \"email\": \"john.doe@acme.com\"\n  },\n  \"lineItems\": [\n    {\n      \"type\": \"subscription\",\n      \"description\": \"Premium Monthly Subscription - Updated\",\n      \"quantity\": 1,\n      \"unitPrice\": 99.99,\n      \"taxRate\": 8.25,\n      \"discountAmount\": 10.00,\n      \"metadata\": {\n        \"plan_id\": \"premium_monthly\",\n        \"discount_applied\": \"early_payment\"\n      }\n    }\n  ],\n  \"paymentTerms\": \"net_15\",\n  \"dueDate\": \"2024-02-20T00:00:00.000Z\",\n  \"notes\": \"Updated invoice with early payment discount\",\n  \"footer\": \"Thank you for your business! Early payment discount applied.\",\n  \"metadata\": {\n    \"invoice_source\": \"api\",\n    \"updated_at\": \"2024-01-15T14:30:00.000Z\",\n    \"discount_reason\": \"early_payment\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/billing/invoices/{{invoiceId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "billing",
                "invoices",
                "{{invoiceId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Mark Invoice as Paid",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"paidDate\": \"2024-01-15T10:30:00.000Z\",\n  \"paymentMethod\": \"credit_card\",\n  \"transactionId\": \"txn_123456789\",\n  \"notes\": \"Payment processed successfully via Stripe\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/billing/invoices/{{invoiceId}}/mark-paid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "billing",
                "invoices",
                "{{invoiceId}}",
                "mark-paid"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Cancel Invoice",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Customer requested cancellation due to service issues\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/billing/invoices/{{invoiceId}}/cancel",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "billing",
                "invoices",
                "{{invoiceId}}",
                "cancel"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Send Invoice",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"customer@example.com\",\n  \"subject\": \"Invoice #{{invoiceId}} - Payment Due\",\n  \"message\": \"Dear Customer,\\n\\nPlease find your invoice attached. Payment is due within 30 days.\\n\\nThank you for your business!\\n\\nBest regards,\\nThe Billing Team\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/billing/invoices/{{invoiceId}}/send",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "billing",
                "invoices",
                "{{invoiceId}}",
                "send"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Generate Invoice PDF",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/billing/invoices/{{invoiceId}}/pdf",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "billing",
                "invoices",
                "{{invoiceId}}",
                "pdf"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is PDF', function () {",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/pdf');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Invoice",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/billing/invoices/{{invoiceId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "billing",
                "invoices",
                "{{invoiceId}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "  pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Health Check",
      "item": [
        {
          "name": "API Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}